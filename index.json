{
  "api/Yarhl.FileFormat.ConverterMetadata.html": {
    "href": "api/Yarhl.FileFormat.ConverterMetadata.html",
    "title": "Class ConverterMetadata | SceneGate Yarhl",
    "keywords": "Class ConverterMetadata Metadata associated to a IConverter interface. Inheritance Object ConverterMetadata Implements IExportMetadata Namespace : Yarhl.FileFormat Assembly : Yarhl.dll Syntax public class ConverterMetadata : IExportMetadata Properties | Improve this Doc View Source InternalDestinations Gets or sets a single type or list of types the converter can convert to. Declaration public object InternalDestinations { get; set; } Property Value Type Description Object Single or list of types the converter can convert to. | Improve this Doc View Source InternalSources Gets or sets a single type or list of types that the converter can convert from. Declaration public object InternalSources { get; set; } Property Value Type Description Object Single or list of types for conversion. | Improve this Doc View Source Name Gets or sets the full name of the type. Shortcut of Type.FullName. Declaration public string Name { get; set; } Property Value Type Description String The full name of the type. | Improve this Doc View Source Type Gets or sets the type of class implemeting the converter. Declaration public Type Type { get; set; } Property Value Type Description Type Type of the converter. Methods | Improve this Doc View Source CanConvert(Type) Check if the associated converter can convert from a given type. It checks applying covariance rules. Declaration public bool CanConvert(Type source) Parameters Type Name Description Type source Source type for conversion. Returns Type Description Boolean If this converter can realize the operation. | Improve this Doc View Source CanConvert(Type, Type) Check if the associated converter can convert from a given type into another. It checks applying covariance and contravariance rules. Declaration public bool CanConvert(Type source, Type dest) Parameters Type Name Description Type source Source type for conversion. Type dest Destination type for conversion. Returns Type Description Boolean If this converter can realize the operation. | Improve this Doc View Source GetDestinations() Gets a list of destination types it can convert to. Declaration public Type[] GetDestinations() Returns Type Description Type [] Destination types it can convert to. | Improve this Doc View Source GetSources() Gets a list of source types that can convert from. Declaration public Type[] GetSources() Returns Type Description Type [] List of source types that can convert from. Implements IExportMetadata"
  },
  "api/Yarhl.FileFormat.ConvertFormat.html": {
    "href": "api/Yarhl.FileFormat.ConvertFormat.html",
    "title": "Class ConvertFormat | SceneGate Yarhl",
    "keywords": "Class ConvertFormat Convert formats with converters. Inheritance Object ConvertFormat Namespace : Yarhl.FileFormat Assembly : Yarhl.dll Syntax public static class ConvertFormat Methods | Improve this Doc View Source To(Type, Object) Converts the format into the specified type. Declaration public static object To(Type dstType, dynamic src) Parameters Type Name Description Type dstType Type of the destination format. Object src Format to convert. Returns Type Description Object The new format. | Improve this Doc View Source To<TDst>(Object) Converts the format to the specified type. Declaration public static TDst To<TDst>(dynamic src) Parameters Type Name Description Object src Format to convert. Returns Type Description TDst The new format. Type Parameters Name Description TDst The destination format type. | Improve this Doc View Source With(Type, Object) Converts the format using a converter with the specified type. Declaration public static object With(Type converterType, dynamic src) Parameters Type Name Description Type converterType Type of the converter. Object src Format to convert. Returns Type Description Object The new format. | Improve this Doc View Source With(IConverter, Object) Converts the format using the specified converter. Declaration public static object With(IConverter converter, dynamic src) Parameters Type Name Description IConverter converter Converter to use. Object src Format to convert. Returns Type Description Object The new format. | Improve this Doc View Source With<TConv>(Object) Converts the format using a converter with the specified type. Declaration public static object With<TConv>(dynamic src) where TConv : IConverter, new() Parameters Type Name Description Object src Format to convert. Returns Type Description Object The new format. Type Parameters Name Description TConv Type of the converter. | Improve this Doc View Source With<TConv, TParam>(TParam, Object) Converts the format using a converter with the specified type and initialized with some parameters. Declaration public static object With<TConv, TParam>(TParam param, dynamic src) where TConv : IConverter, IInitializer<TParam>, new() Parameters Type Name Description TParam param Parameters to initialize the converter. Object src Format to convert. Returns Type Description Object The new format. Type Parameters Name Description TConv Type of the converter. TParam Type of the parameters."
  },
  "api/Yarhl.FileFormat.FormatMetadata.html": {
    "href": "api/Yarhl.FileFormat.FormatMetadata.html",
    "title": "Class FormatMetadata | SceneGate Yarhl",
    "keywords": "Class FormatMetadata Metadata associated to a Format class. Inheritance Object FormatMetadata Implements IExportMetadata Namespace : Yarhl.FileFormat Assembly : Yarhl.dll Syntax public class FormatMetadata : IExportMetadata Properties | Improve this Doc View Source Name Gets or sets the type full name. Shortcut of Type.FullName. Declaration public string Name { get; set; } Property Value Type Description String The full name of the type. | Improve this Doc View Source Type Gets or sets the type of the format. Declaration public Type Type { get; set; } Property Value Type Description Type The type of the format. Implements IExportMetadata"
  },
  "api/Yarhl.FileFormat.html": {
    "href": "api/Yarhl.FileFormat.html",
    "title": "Namespace Yarhl.FileFormat | SceneGate Yarhl",
    "keywords": "Namespace Yarhl.FileFormat Classes ConverterMetadata Metadata associated to a IConverter interface. ConvertFormat Convert formats with converters. FormatMetadata Metadata associated to a Format class. Interfaces IConverter Non-generic converter interface. IConverter<TSrc, TDst> Format converter interface. IExportMetadata Base metadata associated to a exported type. IFormat File format marker. IInitializer<T> Initialization interface."
  },
  "api/Yarhl.FileFormat.IConverter.html": {
    "href": "api/Yarhl.FileFormat.IConverter.html",
    "title": "Interface IConverter | SceneGate Yarhl",
    "keywords": "Interface IConverter Non-generic converter interface. Namespace : Yarhl.FileFormat Assembly : Yarhl.dll Syntax public interface IConverter"
  },
  "api/Yarhl.FileFormat.IConverter-2.html": {
    "href": "api/Yarhl.FileFormat.IConverter-2.html",
    "title": "Interface IConverter<TSrc, TDst> | SceneGate Yarhl",
    "keywords": "Interface IConverter<TSrc, TDst> Format converter interface. Namespace : Yarhl.FileFormat Assembly : Yarhl.dll Syntax public interface IConverter<in TSrc, out TDst> : IConverter Type Parameters Name Description TSrc Source format. TDst Destination format. Methods | Improve this Doc View Source Convert(TSrc) Converts the specified source into the given type. Declaration TDst Convert(TSrc source) Parameters Type Name Description TSrc source Source format to convert. Returns Type Description TDst The converted source."
  },
  "api/Yarhl.FileFormat.IExportMetadata.html": {
    "href": "api/Yarhl.FileFormat.IExportMetadata.html",
    "title": "Interface IExportMetadata | SceneGate Yarhl",
    "keywords": "Interface IExportMetadata Base metadata associated to a exported type. Namespace : Yarhl.FileFormat Assembly : Yarhl.dll Syntax public interface IExportMetadata Properties | Improve this Doc View Source Name Gets or sets the name of the extension. Usually it's the FullName property of Type. Declaration string Name { get; set; } Property Value Type Description String Name of the extension. | Improve this Doc View Source Type Gets or sets the type of the extension. Declaration Type Type { get; set; } Property Value Type Description Type The type of the extension."
  },
  "api/Yarhl.FileFormat.IFormat.html": {
    "href": "api/Yarhl.FileFormat.IFormat.html",
    "title": "Interface IFormat | SceneGate Yarhl",
    "keywords": "Interface IFormat File format marker. Namespace : Yarhl.FileFormat Assembly : Yarhl.dll Syntax public interface IFormat"
  },
  "api/Yarhl.FileFormat.IInitializer-1.html": {
    "href": "api/Yarhl.FileFormat.IInitializer-1.html",
    "title": "Interface IInitializer<T> | SceneGate Yarhl",
    "keywords": "Interface IInitializer<T> Initialization interface. Namespace : Yarhl.FileFormat Assembly : Yarhl.dll Syntax public interface IInitializer<in T> Type Parameters Name Description T Type of the parameters for the initialize. Methods | Improve this Doc View Source Initialize(T) Initialize the instance with the specified parameters. Declaration void Initialize(T parameters) Parameters Type Name Description T parameters Parameters for the initialize."
  },
  "api/Yarhl.FileSystem.html": {
    "href": "api/Yarhl.FileSystem.html",
    "title": "Namespace Yarhl.FileSystem | SceneGate Yarhl",
    "keywords": "Namespace Yarhl.FileSystem Classes NavigableNode<T> Node with navigation features inside a FileSystem. NavigableNodeCollection<T> Read-only collection of NavigableNodes. Navigator Filesystem navigator. Search for nodes and iterate over them. Node Node in the FileSystem with an associated format. NodeContainerFormat Node container format for unpack / pack files. NodeFactory Node factory. NodeSystem Basic settings and configurations for a system of nodes. Enums NavigationMode Navigation mode through a file system."
  },
  "api/Yarhl.FileSystem.NavigableNode-1.html": {
    "href": "api/Yarhl.FileSystem.NavigableNode-1.html",
    "title": "Class NavigableNode<T> | SceneGate Yarhl",
    "keywords": "Class NavigableNode<T> Node with navigation features inside a FileSystem. Inheritance Object NavigableNode<T> Node Implements IDisposable Namespace : Yarhl.FileSystem Assembly : Yarhl.dll Syntax public abstract class NavigableNode<T> : IDisposable where T : NavigableNode<T> Type Parameters Name Description T The implementation of NavigableNodes. Constructors | Improve this Doc View Source NavigableNode(String) Initializes a new instance of the NavigableNode<T> class. Declaration protected NavigableNode(string name) Parameters Type Name Description String name Node name. Properties | Improve this Doc View Source Children Gets a read-only list of children nodes. Declaration public NavigableNodeCollection<T> Children { get; } Property Value Type Description NavigableNodeCollection <T> | Improve this Doc View Source Disposed Gets a value indicating whether this node is disposed. Declaration public bool Disposed { get; } Property Value Type Description Boolean | Improve this Doc View Source Name Gets the node name. Declaration public string Name { get; } Property Value Type Description String | Improve this Doc View Source Parent Gets the parent node. Declaration public T Parent { get; } Property Value Type Description T | Improve this Doc View Source Path Gets the path. Declaration public string Path { get; } Property Value Type Description String Remarks It includes the names of all the parent nodes and this node. | Improve this Doc View Source Tags Gets the dictionary of tags. Declaration public IDictionary<string, dynamic> Tags { get; } Property Value Type Description IDictionary < String , Object > Methods | Improve this Doc View Source Add(T) Add a node. Declaration public void Add(T node) Parameters Type Name Description T node Node to add. Remarks Updates the parent of the child node to match this instance. If the node already contains a child with the same name it will be replaced. Otherwise the node is added. | Improve this Doc View Source Add(IEnumerable<T>) Add a list of nodes. Declaration public void Add(IEnumerable<T> nodes) Parameters Type Name Description IEnumerable <T> nodes List of nodes to add. | Improve this Doc View Source Dispose() Releases all resource used by the Node object. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Releases all resource used by the NavigableNode<T> object. Declaration protected virtual void Dispose(bool freeManagedResourcesAlso) Parameters Type Name Description Boolean freeManagedResourcesAlso If set to true free managed resources also. | Improve this Doc View Source Remove(T) Remove a node. Declaration public bool Remove(T node) Parameters Type Name Description T node Node reference to remove. Returns Type Description Boolean Whether the node was found and removed successfully. Remarks This method does NOT dispose the removed node. | Improve this Doc View Source Remove(String) Remove a node with the specified name. Declaration public bool Remove(string name) Parameters Type Name Description String name The name of the node to remove. Returns Type Description Boolean Whether the node was found and removed successfully. Remarks This method does dispose the removed node. If you don't want to dispose it, search the node and call the overload with the node argument. | Improve this Doc View Source RemoveChildren(Boolean) Removes and dispose all the children from the node. Declaration public void RemoveChildren(bool dispose = true) Parameters Type Name Description Boolean dispose If set to true disposes the nodes before remove them. | Improve this Doc View Source SortChildren(Boolean) Sorts the children nodes using the default comparer. Declaration public void SortChildren(bool recursive = true) Parameters Type Name Description Boolean recursive If set to true sorts the children nodes recursively. | Improve this Doc View Source SortChildren(IComparer<T>, Boolean) Sorts the children nodes using the specified comparer. Declaration public void SortChildren(IComparer<T> comparer, bool recursive = true) Parameters Type Name Description IComparer <T> comparer The IComparer<T> implementation to use when comparing elements. Boolean recursive If set to true sorts the children nodes recursively. | Improve this Doc View Source SortChildren(Comparison<T>, Boolean) Sorts the children nodes using the specified Comparison<T> . Declaration public void SortChildren(Comparison<T> comparison, bool recursive = true) Parameters Type Name Description Comparison <T> comparison The Comparison<T> to use when comparing elements. Boolean recursive If set to true sorts the children nodes recursively. Implements System.IDisposable"
  },
  "api/Yarhl.FileSystem.NavigableNodeCollection-1.html": {
    "href": "api/Yarhl.FileSystem.NavigableNodeCollection-1.html",
    "title": "Class NavigableNodeCollection<T> | SceneGate Yarhl",
    "keywords": "Class NavigableNodeCollection<T> Read-only collection of NavigableNodes. Inheritance Object ReadOnlyCollection <T> NavigableNodeCollection<T> Implements IList <T> ICollection <T> IReadOnlyList <T> IReadOnlyCollection <T> IEnumerable <T> IList ICollection IEnumerable Inherited Members System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.IList<T>.get_Item(System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.IList<T>.set_Item(System.Int32, T) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.get_Item(System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.set_Item(System.Int32, System.Object) ReadOnlyCollection<T>.Contains(T) ReadOnlyCollection<T>.CopyTo(T[], Int32) ReadOnlyCollection<T>.GetEnumerator() ReadOnlyCollection<T>.IndexOf(T) ReadOnlyCollection<T>.ICollection<T>.Add(T) ReadOnlyCollection<T>.ICollection<T>.Clear() ReadOnlyCollection<T>.ICollection<T>.Remove(T) ReadOnlyCollection<T>.IList<T>.Insert(Int32, T) ReadOnlyCollection<T>.IList<T>.RemoveAt(Int32) ReadOnlyCollection<T>.ICollection.CopyTo(Array, Int32) ReadOnlyCollection<T>.IEnumerable.GetEnumerator() ReadOnlyCollection<T>.IList.Add(Object) ReadOnlyCollection<T>.IList.Clear() ReadOnlyCollection<T>.IList.Contains(Object) ReadOnlyCollection<T>.IList.IndexOf(Object) ReadOnlyCollection<T>.IList.Insert(Int32, Object) ReadOnlyCollection<T>.IList.Remove(Object) ReadOnlyCollection<T>.IList.RemoveAt(Int32) ReadOnlyCollection<T>.Count ReadOnlyCollection<T>.Item[Int32] ReadOnlyCollection<T>.Items ReadOnlyCollection<T>.ICollection<T>.IsReadOnly ReadOnlyCollection<T>.IList<T>.Item[Int32] ReadOnlyCollection<T>.ICollection.IsSynchronized ReadOnlyCollection<T>.ICollection.SyncRoot ReadOnlyCollection<T>.IList.IsFixedSize ReadOnlyCollection<T>.IList.IsReadOnly ReadOnlyCollection<T>.IList.Item[Int32] Namespace : Yarhl.FileSystem Assembly : Yarhl.dll Syntax public class NavigableNodeCollection<T> : ReadOnlyCollection<T>, IList<T>, ICollection<T>, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IList, ICollection, IEnumerable where T : NavigableNode<T> Type Parameters Name Description T The implementation of NavigableNodes. Constructors | Improve this Doc View Source NavigableNodeCollection(IList<T>) Initializes a new instance of the NavigableNodeCollection<T> class. Declaration public NavigableNodeCollection(IList<T> list) Parameters Type Name Description IList <T> list Original list of nodes. Properties | Improve this Doc View Source Item[String] Gets the NavigableNodeCollection<T> with the specified name. Declaration public T this[string name] { get; } Parameters Type Name Description String name Node name. Property Value Type Description T The node with the same name or null if not found. Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable"
  },
  "api/Yarhl.FileSystem.NavigationMode.html": {
    "href": "api/Yarhl.FileSystem.NavigationMode.html",
    "title": "Enum NavigationMode | SceneGate Yarhl",
    "keywords": "Enum NavigationMode Navigation mode through a file system. Namespace : Yarhl.FileSystem Assembly : Yarhl.dll Syntax public enum NavigationMode Fields Name Description BreadthFirst Breadth-First Search. Returns first nodes in the same directory. DepthFirst Depth-First Search. Return first nodes in sub-directories."
  },
  "api/Yarhl.FileSystem.Navigator.html": {
    "href": "api/Yarhl.FileSystem.Navigator.html",
    "title": "Class Navigator | SceneGate Yarhl",
    "keywords": "Class Navigator Filesystem navigator. Search for nodes and iterate over them. Inheritance Object Navigator Namespace : Yarhl.FileSystem Assembly : Yarhl.dll Syntax public static class Navigator Methods | Improve this Doc View Source IterateNodes<T>(T, NavigationMode) Iterates the nodes recursively. Declaration public static IEnumerable<T> IterateNodes<T>(T rootNode, NavigationMode mode = NavigationMode.BreadthFirst) where T : NavigableNode<T> Parameters Type Name Description T rootNode The root node to start iterating. NavigationMode mode The navigation mode. Returns Type Description IEnumerable <T> The nodes. Type Parameters Name Description T NavigableNode type. | Improve this Doc View Source SearchNode<T>(T, String) Search a node by path. Declaration public static T SearchNode<T>(T rootNode, string path) where T : NavigableNode<T> Parameters Type Name Description T rootNode The root node to start the search. String path Path to search. Returns Type Description T Node or null if not found. Type Parameters Name Description T NavigableNode type. Remarks If the path starts with the path separator '/', it is considered to be a full path. Otherwise, it would be a relative path starting with the node in the argument."
  },
  "api/Yarhl.FileSystem.Node.html": {
    "href": "api/Yarhl.FileSystem.Node.html",
    "title": "Class Node | SceneGate Yarhl",
    "keywords": "Class Node Node in the FileSystem with an associated format. Inheritance Object NavigableNode < Node > Node Implements IDisposable Inherited Members NavigableNode<Node>.Name NavigableNode<Node>.Path NavigableNode<Node>.Parent NavigableNode<Node>.Children NavigableNode<Node>.Tags NavigableNode<Node>.Disposed NavigableNode<Node>.Add(Node) NavigableNode<Node>.Add(IEnumerable<Node>) NavigableNode<Node>.Remove(Node) NavigableNode<Node>.Remove(String) NavigableNode<Node>.RemoveChildren(Boolean) NavigableNode<Node>.Dispose() NavigableNode<Node>.SortChildren(Boolean) NavigableNode<Node>.SortChildren(IComparer<Node>, Boolean) NavigableNode<Node>.SortChildren(Comparison<Node>, Boolean) Namespace : Yarhl.FileSystem Assembly : Yarhl.dll Syntax public class Node : NavigableNode<Node>, IDisposable Constructors | Improve this Doc View Source Node(String) Initializes a new instance of the Node class. Declaration public Node(string name) Parameters Type Name Description String name Node name. | Improve this Doc View Source Node(String, IFormat) Initializes a new instance of the Node class. Declaration public Node(string name, IFormat initialFormat) Parameters Type Name Description String name Node name. IFormat initialFormat Node format. Properties | Improve this Doc View Source Format Gets the current format of the node. Declaration public IFormat Format { get; } Property Value Type Description IFormat The current format. | Improve this Doc View Source IsContainer Gets a value indicating whether the format is a container of nodes. Declaration public bool IsContainer { get; } Property Value Type Description Boolean true if the format is a container; otherwise, false . | Improve this Doc View Source Stream Gets the node associated DataStream if the format is IBinary. Declaration public DataStream Stream { get; } Property Value Type Description DataStream DataStream if the format is IBinary, null otherwise. Methods | Improve this Doc View Source ChangeFormat(IFormat, Boolean) Change the format of the current node. Declaration public void ChangeFormat(IFormat newFormat, bool disposePreviousFormat = true) Parameters Type Name Description IFormat newFormat The new format to assign. Boolean disposePreviousFormat If true the method will dispose the previous format. Remarks If the previous format was a container, this method will remove the children of the node. If the new format is a container, this method will add the format children to the node. If the new format is the same reference as the current format the method is a no-op. | Improve this Doc View Source Dispose(Boolean) Releases all resource used by the Node object. Declaration protected override void Dispose(bool freeManagedResourcesAlso) Parameters Type Name Description Boolean freeManagedResourcesAlso If set to true free managed resources also. Overrides Yarhl.FileSystem.NavigableNode<Yarhl.FileSystem.Node>.Dispose(System.Boolean) | Improve this Doc View Source GetFormatAs<T>() Gets the format as the specified type. Declaration public T GetFormatAs<T>() where T : class, IFormat Returns Type Description T The format casted to the type or null if not possible. Type Parameters Name Description T The format type. | Improve this Doc View Source TransformTo(Type) Transforms the node format to the specified format. Declaration public Node TransformTo(Type dst) Parameters Type Name Description Type dst Format to convert. It must implement IFormat. Returns Type Description Node This node. | Improve this Doc View Source TransformTo<TDst>() Transforms the node format to the specified format. Declaration public Node TransformTo<TDst>() where TDst : IFormat Returns Type Description Node This node. Type Parameters Name Description TDst Format to convert. | Improve this Doc View Source TransformWith(Type) Transforms the node format with the specified converter. Declaration public Node TransformWith(Type converterType) Parameters Type Name Description Type converterType The type of the converter to use. Returns Type Description Node This node. | Improve this Doc View Source TransformWith<TConv>() Transform the node format to another format with a given converter. Declaration public Node TransformWith<TConv>() where TConv : IConverter, new() Returns Type Description Node This node. Type Parameters Name Description TConv The type of the converter to use. | Improve this Doc View Source TransformWith<TConv, TParam>(TParam) Transform the node format to another format with a given converter initialized with parameters. Declaration public Node TransformWith<TConv, TParam>(TParam param) where TConv : IConverter, IInitializer<TParam>, new() Parameters Type Name Description TParam param Parameters to initialize the converter. Returns Type Description Node This node. Type Parameters Name Description TConv The type of the converter to use. TParam The type for initializing the converter. | Improve this Doc View Source TransformWith<TSrc, TDst>(IConverter<TSrc, TDst>) Transform the node format to another format using a converter. Declaration public Node TransformWith<TSrc, TDst>(IConverter<TSrc, TDst> converter) where TSrc : IFormat where TDst : IFormat Parameters Type Name Description IConverter <TSrc, TDst> converter Convert to use. Returns Type Description Node This node. Type Parameters Name Description TSrc The type of the source format. TDst The type of the destination format. Implements System.IDisposable"
  },
  "api/Yarhl.FileSystem.NodeContainerFormat.html": {
    "href": "api/Yarhl.FileSystem.NodeContainerFormat.html",
    "title": "Class NodeContainerFormat | SceneGate Yarhl",
    "keywords": "Class NodeContainerFormat Node container format for unpack / pack files. Inheritance Object NodeContainerFormat Implements IFormat IDisposable Namespace : Yarhl.FileSystem Assembly : Yarhl.dll Syntax public class NodeContainerFormat : IFormat, IDisposable Constructors | Improve this Doc View Source NodeContainerFormat() Initializes a new instance of the NodeContainerFormat class. Declaration public NodeContainerFormat() Properties | Improve this Doc View Source Disposed Gets a value indicating whether this NodeContainerFormat is disposed. Declaration public bool Disposed { get; } Property Value Type Description Boolean | Improve this Doc View Source Root Gets the root node containing the children. Declaration public Node Root { get; } Property Value Type Description Node Methods | Improve this Doc View Source Dispose() Releases all resource used by the NodeContainerFormat object. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Releases all resource used by the NodeContainerFormat object. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing If set to true free managed resources also. It happens from Dispose() calls. | Improve this Doc View Source MoveChildrenTo(Node, Boolean) Moves the children from this format to a Node . Declaration public void MoveChildrenTo(Node newNode, bool mergeContainers = false) Parameters Type Name Description Node newNode Node that will contain the children. Boolean mergeContainers If set to true it will merge container nodes with the same name. Remarks The node will handle the lifecycle of the children. Disposing the format won't dispose the children. It will replace nodes with the same name. Implements IFormat System.IDisposable"
  },
  "api/Yarhl.FileSystem.NodeFactory.html": {
    "href": "api/Yarhl.FileSystem.NodeFactory.html",
    "title": "Class NodeFactory | SceneGate Yarhl",
    "keywords": "Class NodeFactory Node factory. Inheritance Object NodeFactory Namespace : Yarhl.FileSystem Assembly : Yarhl.dll Syntax public static class NodeFactory Methods | Improve this Doc View Source CreateContainer(String) Creates a new Node with a new NodeContainer format. Declaration public static Node CreateContainer(string name) Parameters Type Name Description String name Node name. Returns Type Description Node The new node. | Improve this Doc View Source CreateContainersForChild(Node, String, Node) Creates the missing parent nodes to contain the child and add it. Declaration public static void CreateContainersForChild(Node root, string path, Node child) Parameters Type Name Description Node root The root node that will contain the nodes. String path The path for the child. It doesn't contain the root or child names. Node child The child to add to root with the path. | Improve this Doc View Source FromDirectory(String, Func<String, Boolean>, String, Boolean, FileOpenMode) Creates a Node containing all the files from the directory. Declaration public static Node FromDirectory(string dirPath, Func<string, bool> filter, string nodeName, bool subDirectories = false, FileOpenMode mode = FileOpenMode.ReadWrite) Parameters Type Name Description String dirPath Directory path. Func < String , Boolean > filter Filter for files in directory. String nodeName Node name. Boolean subDirectories If true it searchs recursively in subdirectories. FileOpenMode mode The mode to open the files. Returns Type Description Node The container node. | Improve this Doc View Source FromDirectory(String, Func<String, Boolean>, FileOpenMode) Creates a Node containing all the files from the directory. Declaration public static Node FromDirectory(string dirPath, Func<string, bool> filter, FileOpenMode mode = FileOpenMode.ReadWrite) Parameters Type Name Description String dirPath Directory path. Func < String , Boolean > filter Filter for files in directory. FileOpenMode mode The mode to open the files. Returns Type Description Node The container node. | Improve this Doc View Source FromDirectory(String, String, String, Boolean, FileOpenMode) Creates a Node containing all the files from the directory. Declaration public static Node FromDirectory(string dirPath, string filter, string nodeName, bool subDirectories = false, FileOpenMode mode = FileOpenMode.ReadWrite) Parameters Type Name Description String dirPath Directory path. String filter Filter for files in directory. String nodeName Node name. Boolean subDirectories If true it searchs recursively in subdirectories. FileOpenMode mode The mode to open the files. Returns Type Description Node The container node. | Improve this Doc View Source FromDirectory(String, String, FileOpenMode) Creates a Node containing all the files from the directory. Declaration public static Node FromDirectory(string dirPath, string filter = \"*\", FileOpenMode mode = FileOpenMode.ReadWrite) Parameters Type Name Description String dirPath Directory path. String filter Filter for files in directory. FileOpenMode mode The mode to open the files. Returns Type Description Node The container node. | Improve this Doc View Source FromFile(String, String, FileOpenMode) Creates a Node from a file. Declaration public static Node FromFile(string filePath, string nodeName, FileOpenMode mode = FileOpenMode.ReadWrite) Parameters Type Name Description String filePath File path. String nodeName Node name. FileOpenMode mode The mode to open the file. Returns Type Description Node The node. | Improve this Doc View Source FromFile(String, FileOpenMode) Creates a Node from a file. Declaration public static Node FromFile(string filePath, FileOpenMode mode = FileOpenMode.ReadWrite) Parameters Type Name Description String filePath File path. FileOpenMode mode The mode to open the file. Returns Type Description Node The node. | Improve this Doc View Source FromMemory(String) Creates a Node with a new stream from memory. Declaration public static Node FromMemory(string name) Parameters Type Name Description String name The name of the node. Returns Type Description Node The new node. | Improve this Doc View Source FromSubstream(String, Stream, Int64, Int64) Creates a Node from a part of a stream. Declaration public static Node FromSubstream(string name, Stream source, long offset, long length) Parameters Type Name Description String name The name of the node. Stream source The source / parent stream. Int64 offset The offset in the source stream where the node starts. Int64 length The length of the data in the node. Returns Type Description Node The new node. Remarks This format creates an internal DataStream from the provided stream. It will take over the ownership of the stream argument, you should not dispose this argument, unless you are providing a DataStream in which case it is safe and recommended to dispose it."
  },
  "api/Yarhl.FileSystem.NodeSystem.html": {
    "href": "api/Yarhl.FileSystem.NodeSystem.html",
    "title": "Class NodeSystem | SceneGate Yarhl",
    "keywords": "Class NodeSystem Basic settings and configurations for a system of nodes. Inheritance Object NodeSystem Namespace : Yarhl.FileSystem Assembly : Yarhl.dll Syntax public static class NodeSystem Properties | Improve this Doc View Source PathSeparator Gets the path separator. Declaration public static string PathSeparator { get; } Property Value Type Description String The path separator."
  },
  "api/Yarhl.html": {
    "href": "api/Yarhl.html",
    "title": "Namespace Yarhl | SceneGate Yarhl",
    "keywords": "Namespace Yarhl Classes PluginManager Plugin manager."
  },
  "api/Yarhl.IO.BinaryFormat.html": {
    "href": "api/Yarhl.IO.BinaryFormat.html",
    "title": "Class BinaryFormat | SceneGate Yarhl",
    "keywords": "Class BinaryFormat Binary format. Inheritance Object BinaryFormat Implements IBinary IFormat IDisposable Namespace : Yarhl.IO Assembly : Yarhl.dll Syntax public class BinaryFormat : IBinary, IFormat, IDisposable Constructors | Improve this Doc View Source BinaryFormat() Initializes a new instance of the BinaryFormat class. Creates a stream in memory. Declaration public BinaryFormat() | Improve this Doc View Source BinaryFormat(Stream) Initializes a new instance of the BinaryFormat class. Declaration public BinaryFormat(Stream stream) Parameters Type Name Description Stream stream Stream to wrap as a format. It takes over the ownership of the stream. You must not dispose it. | Improve this Doc View Source BinaryFormat(Stream, Int64, Int64) Initializes a new instance of the BinaryFormat class. Declaration public BinaryFormat(Stream stream, long offset, long length) Parameters Type Name Description Stream stream Binary stream. Int64 offset Offset from the DataStream start. Int64 length Length of the substream. Remarks This format creates an internal DataStream from the provided stream. It will take over the ownership of the stream argument, you should not dispose this argument, unless you are providing a DataStream in which case it is safe and recommended to dispose it. Properties | Improve this Doc View Source Disposed Gets a value indicating whether this BinaryFormat is disposed. Declaration public bool Disposed { get; } Property Value Type Description Boolean | Improve this Doc View Source Stream Gets the stream. Declaration public DataStream Stream { get; } Property Value Type Description DataStream Methods | Improve this Doc View Source Dispose() Releases all resource used by the BinaryFormat object. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Releases all resource used by the BinaryFormat object. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing If set to true free managed resources also. It happens from Dispose() calls. Implements IBinary IFormat System.IDisposable"
  },
  "api/Yarhl.IO.DataReader.html": {
    "href": "api/Yarhl.IO.DataReader.html",
    "title": "Class DataReader | SceneGate Yarhl",
    "keywords": "Class DataReader Binary DataReader for DataStreams. Inheritance Object DataReader Namespace : Yarhl.IO Assembly : Yarhl.dll Syntax public class DataReader Constructors | Improve this Doc View Source DataReader(Stream) Initializes a new instance of the DataReader class. Declaration public DataReader(Stream stream) Parameters Type Name Description Stream stream Stream to read from. Remarks By default the endianness is LittleEndian and the encoding is UTF-8. Properties | Improve this Doc View Source DefaultEncoding Gets or sets the default encoding. Declaration public Encoding DefaultEncoding { get; set; } Property Value Type Description Encoding | Improve this Doc View Source Endianness Gets or sets the endianness. Declaration public EndiannessMode Endianness { get; set; } Property Value Type Description EndiannessMode | Improve this Doc View Source Stream Gets the stream. Declaration public Stream Stream { get; } Property Value Type Description Stream Methods | Improve this Doc View Source Read<T>() Read a field by type. Declaration public dynamic Read<T>() Returns Type Description Object The field. Type Parameters Name Description T The type of the field. | Improve this Doc View Source ReadByte() Reads a 8-bit byte number. Declaration public byte ReadByte() Returns Type Description Byte The next byte. | Improve this Doc View Source ReadBytes(Int32) Reads bytes from the stream. Declaration public byte[] ReadBytes(int count) Parameters Type Name Description Int32 count Number of bytes to read. Returns Type Description Byte [] The bytes read. | Improve this Doc View Source ReadByType(Type) Reads a field by type. Declaration public dynamic ReadByType(Type type) Parameters Type Name Description Type type Type of the field. Returns Type Description Object The field. | Improve this Doc View Source ReadChar(Encoding) Reads a char. Declaration public char ReadChar(Encoding encoding = null) Parameters Type Name Description Encoding encoding Encoding to use or null to use DefaultEncoding . Returns Type Description Char The next char. Remarks This method read one code units. A code unit may not represent a full grapheme. This method may return corrupted code units and may advance a wrong number of bytes if the given number of code units to read are not enough to represent a grapheme. | Improve this Doc View Source ReadChars(Int32, Encoding) Reads an array of chars. Declaration public char[] ReadChars(int count, Encoding encoding = null) Parameters Type Name Description Int32 count The number of chars (code-units) to read. Encoding encoding Encoding to use or null to use DefaultEncoding . Returns Type Description Char [] The chars (code-units) read. Remarks This method reads code units. A code unit may not represent a full grapheme. This method may return corrupted code units and may advance a wrong number of bytes if the given number of code units to read are not enough to represent a grapheme. | Improve this Doc View Source ReadDouble() Reads a 64-bits IEEE 754 double precision floating-point number. Declaration public double ReadDouble() Returns Type Description Double The next double number. | Improve this Doc View Source ReadInt16() Reads a signed 16-bit number. Declaration public short ReadInt16() Returns Type Description Int16 The next signed 16-bit number. | Improve this Doc View Source ReadInt24() Reads a 24-bit number. Declaration public int ReadInt24() Returns Type Description Int32 The next 24-bit number. | Improve this Doc View Source ReadInt32() Reads a signed 32-bit number. Declaration public int ReadInt32() Returns Type Description Int32 The next signed 32-bit number. | Improve this Doc View Source ReadInt64() Reads a signed 64-bit number. Declaration public long ReadInt64() Returns Type Description Int64 The next signed 64-bit number. | Improve this Doc View Source ReadSByte() Reads a signed 8-bit byte number. Declaration [CLSCompliant(false)] public sbyte ReadSByte() Returns Type Description SByte The next signed byte. | Improve this Doc View Source ReadSingle() Reads a 32-bits IEEE 754 single precision floating-point number. Declaration public float ReadSingle() Returns Type Description Single The next float number. | Improve this Doc View Source ReadString(Int32, Encoding) Reads a string with a constant size. Declaration public string ReadString(int bytesCount, Encoding encoding = null) Parameters Type Name Description Int32 bytesCount Size of the string in bytes. Encoding encoding Optional encoding to use. Returns Type Description String The string. | Improve this Doc View Source ReadString(Encoding) Reads a string that ends with the null terminator. Declaration public string ReadString(Encoding encoding = null) Parameters Type Name Description Encoding encoding Optional encoding to use. Returns Type Description String The string. | Improve this Doc View Source ReadString(Type, Encoding) Reads the size with a size field first. Declaration public string ReadString(Type sizeType, Encoding encoding = null) Parameters Type Name Description Type sizeType Type of the size field. Encoding encoding Optional encoding to use. Returns Type Description String The string. | Improve this Doc View Source ReadStringToToken(String, Encoding) Reads a string until a string token is found. Declaration public string ReadStringToToken(string token, Encoding encoding = null) Parameters Type Name Description String token Token to find. Encoding encoding Encoding to use or null to use DefaultEncoding . Returns Type Description String The read string. | Improve this Doc View Source ReadUInt16() Reads an unsigned 16-bit number. Declaration [CLSCompliant(false)] public ushort ReadUInt16() Returns Type Description UInt16 The next 16-bit number. | Improve this Doc View Source ReadUInt32() Reads an unsigned 32-bit number. Declaration [CLSCompliant(false)] public uint ReadUInt32() Returns Type Description UInt32 The next unsigned 32-bit number. | Improve this Doc View Source ReadUInt64() Reads an unsigned 64-bit number. Declaration [CLSCompliant(false)] public ulong ReadUInt64() Returns Type Description UInt64 The next unsigned 64-bit number. | Improve this Doc View Source SkipPadding(Int32) Skip bytes to pad the position in the stream. Declaration public void SkipPadding(int padding) Parameters Type Name Description Int32 padding Padding value."
  },
  "api/Yarhl.IO.DataStream.html": {
    "href": "api/Yarhl.IO.DataStream.html",
    "title": "Class DataStream | SceneGate Yarhl",
    "keywords": "Class DataStream Virtual Stream with substream capabilities and read/write abstraction layer. Inheritance Object MarshalByRefObject Stream DataStream Implements IDisposable Inherited Members Stream.Null Stream.BeginRead(Byte[], Int32, Int32, AsyncCallback, Object) Stream.BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object) Stream.Close() Stream.CopyTo(Stream) Stream.CopyTo(Stream, Int32) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, Int32) Stream.CopyToAsync(Stream, Int32, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.FlushAsync(CancellationToken) Stream.ObjectInvariant() Stream.ReadAsync(Byte[], Int32, Int32) Stream.ReadAsync(Byte[], Int32, Int32, CancellationToken) Stream.Synchronized(Stream) Stream.WriteAsync(Byte[], Int32, Int32) Stream.WriteAsync(Byte[], Int32, Int32, CancellationToken) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(Boolean) Namespace : Yarhl.IO Assembly : Yarhl.dll Syntax public class DataStream : Stream, IDisposable Constructors | Improve this Doc View Source DataStream() Initializes a new instance of the DataStream class. A new stream is created in memory. Declaration public DataStream() | Improve this Doc View Source DataStream(DataStream, Int64, Int64) Initializes a new instance of the DataStream class. Declaration public DataStream(DataStream stream, long offset, long length) Parameters Type Name Description DataStream stream Base stream. Int64 offset Offset from the DataStream start. Int64 length Length of this substream. | Improve this Doc View Source DataStream(IStream) Initializes a new instance of the DataStream class. Declaration public DataStream(IStream stream) Parameters Type Name Description IStream stream Base stream. Remarks The dispose ownership is transferred to this stream. | Improve this Doc View Source DataStream(IStream, Int64, Int64, Boolean) Initializes a new instance of the DataStream class. Declaration public DataStream(IStream stream, long offset, long length, bool transferOwnership) Parameters Type Name Description IStream stream Base stream. Int64 offset Offset from the base stream. Int64 length Length of this substream. Boolean transferOwnership Transfer the ownsership of the stream argument to this class so it can dispose it. Properties | Improve this Doc View Source AbsolutePosition Gets the position from the base stream. Declaration public long AbsolutePosition { get; } Property Value Type Description Int64 | Improve this Doc View Source ActiveStreams Gets the number of streams in use. Declaration public static int ActiveStreams { get; } Property Value Type Description Int32 | Improve this Doc View Source BaseStream Gets the base stream. Declaration public IStream BaseStream { get; } Property Value Type Description IStream | Improve this Doc View Source CanRead Gets a value indicating whether the current stream supports reading. Declaration public override bool CanRead { get; } Property Value Type Description Boolean Overrides Stream.CanRead | Improve this Doc View Source CanSeek Gets a value indicating whether the current stream supports seeking. Declaration public override bool CanSeek { get; } Property Value Type Description Boolean Overrides Stream.CanSeek | Improve this Doc View Source CanWrite Gets a value indicating whether the current stream supports writing. Declaration public override bool CanWrite { get; } Property Value Type Description Boolean Overrides Stream.CanWrite | Improve this Doc View Source Disposed Gets a value indicating whether this DataStream is disposed. Declaration public bool Disposed { get; } Property Value Type Description Boolean | Improve this Doc View Source EndOfStream Gets a value indicating whether the position is at end of the stream. Declaration public bool EndOfStream { get; } Property Value Type Description Boolean | Improve this Doc View Source Length Gets the length of this stream. Declaration public override long Length { get; } Property Value Type Description Int64 Overrides Stream.Length | Improve this Doc View Source Offset Gets the offset from the BaseStream. Declaration public long Offset { get; } Property Value Type Description Int64 | Improve this Doc View Source ParentDataStream Gets the parent DataStream only if this stream was initialized from a DataStream. Declaration public DataStream ParentDataStream { get; } Property Value Type Description DataStream | Improve this Doc View Source Position Gets or sets the position from the start of this stream. Declaration public override long Position { get; set; } Property Value Type Description Int64 Overrides Stream.Position Methods | Improve this Doc View Source Compare(Stream) Compare the content of the stream with another one. Declaration public bool Compare(Stream otherStream) Parameters Type Name Description Stream otherStream Stream to compare with. Returns Type Description Boolean The result of the comparison. | Improve this Doc View Source Dispose(Boolean) Releases all resource used by the DataStream object. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing If set to true free managed resources also. Overrides Stream.Dispose(Boolean) | Improve this Doc View Source Flush() Clears all buffers for this stream and causes any buffered data to be written to the underlying device. Declaration public override void Flush() Overrides Stream.Flush() | Improve this Doc View Source PopPosition() Pop the last position from the stack and move to it. Declaration public void PopPosition() | Improve this Doc View Source PushCurrentPosition() Push the current position into a stack. Declaration public void PushCurrentPosition() | Improve this Doc View Source PushToPosition(Int64, SeekOrigin) Push the current position into a stack and move to a new one. Declaration public void PushToPosition(long shift, SeekOrigin mode = SeekOrigin.Begin) Parameters Type Name Description Int64 shift Distance to move position. SeekOrigin mode Mode to move position. | Improve this Doc View Source PushToPosition(Int64, SeekMode) Push the current position into a stack and move to a new one. Declaration [Obsolete(\"Use the overload with SeekOrigin.\")] public void PushToPosition(long shift, SeekMode mode) Parameters Type Name Description Int64 shift Distance to move position. SeekMode mode Mode to move position. | Improve this Doc View Source Read(Byte[], Int32, Int32) Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer Buffer to copy data. Int32 offset Index to start copying in buffer. Int32 count Maximum number of bytes to read. Returns Type Description Int32 The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached. Overrides Stream.Read(Byte[], Int32, Int32) | Improve this Doc View Source ReadByte() Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream. Declaration public override int ReadByte() Returns Type Description Int32 The unsigned byte cast to an Int32, or -1 if at the end of the stream. Overrides Stream.ReadByte() | Improve this Doc View Source ReadFormat<T>() Reads a format from this stream. Declaration public T ReadFormat<T>() Returns Type Description T The format read. Type Parameters Name Description T The type of the format to read. | Improve this Doc View Source RunInPosition(Action, Int64, SeekOrigin) Run a method in a specific position. This command will move into the position, run the method and return to the current position. Declaration public void RunInPosition(Action action, long position, SeekOrigin mode = SeekOrigin.Begin) Parameters Type Name Description Action action Action to run. Int64 position Position to move. SeekOrigin mode Mode to move position. | Improve this Doc View Source RunInPosition(Action, Int64, SeekMode) Run a method in a specific position. This command will move into the position, run the method and return to the current position. Declaration [Obsolete(\"Use the overload with SeekOrigin.\")] public void RunInPosition(Action action, long position, SeekMode mode) Parameters Type Name Description Action action Action to run. Int64 position Position to move. SeekMode mode Mode to move position. | Improve this Doc View Source Seek(Int64, SeekOrigin) Move the position of the stream. Declaration public override long Seek(long offset, SeekOrigin origin = SeekOrigin.Begin) Parameters Type Name Description Int64 offset Distance to move position. SeekOrigin origin Mode to move position. Returns Type Description Int64 The new position of the stream. Overrides Stream.Seek(Int64, SeekOrigin) | Improve this Doc View Source Seek(Int64, SeekMode) Move the position of the Stream. Declaration [Obsolete(\"Use the overload with SeekOrigin.\")] public void Seek(long shift, SeekMode mode) Parameters Type Name Description Int64 shift Distance to move position. SeekMode mode Mode to move position. | Improve this Doc View Source SetLength(Int64) Sets the length of the current stream. Declaration public override void SetLength(long value) Parameters Type Name Description Int64 value The new length value. Overrides Stream.SetLength(Int64) | Improve this Doc View Source Write(Byte[], Int32, Int32) Writes the a portion of the buffer to the stream. Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer Buffer to write. Int32 offset Index in the buffer. Int32 count Bytes to write. Overrides Stream.Write(Byte[], Int32, Int32) | Improve this Doc View Source WriteByte(Byte) Writes a byte. Declaration public override void WriteByte(byte value) Parameters Type Name Description Byte value Byte value. Overrides Stream.WriteByte(Byte) | Improve this Doc View Source WriteSegmentTo(Int64, Int64, Stream) Writes a segment of the stream into another stream. Declaration public void WriteSegmentTo(long start, long length, Stream stream) Parameters Type Name Description Int64 start Starting position to read from the current stream. Int64 length Length of the segment to read. Stream stream Output stream. Remarks It preserves the current position and writes to the current position of the destination stream. | Improve this Doc View Source WriteSegmentTo(Int64, Int64, String) Writes a segment of the stream into a file. Declaration public void WriteSegmentTo(long start, long length, string fileOut) Parameters Type Name Description Int64 start Starting position to read from the current stream. Int64 length Length of the segment to read. String fileOut Output file path. Remarks It preserves the current position and creates any required directory. | Improve this Doc View Source WriteSegmentTo(Int64, Stream) Writes a segment of the stream into another stream from a defined position to the end. Declaration public void WriteSegmentTo(long start, Stream stream) Parameters Type Name Description Int64 start Starting position to read from the current stream. Stream stream Output stream. Remarks It preserves the current position and writes to the current position of the destination stream. | Improve this Doc View Source WriteSegmentTo(Int64, String) Writes a segment of the stream into a file from a defined position to the end. Declaration public void WriteSegmentTo(long start, string fileOut) Parameters Type Name Description Int64 start Starting position to read from the current stream. String fileOut Output file path. Remarks It preserves the current position and creates any required directory. | Improve this Doc View Source WriteTo(Stream) Writes the complete stream into another stream preserving the current position. Declaration public void WriteTo(Stream stream) Parameters Type Name Description Stream stream The stream to write. Remarks This method is similar to CopyTo(Stream) . The difference is that it copies always from the position 0 of the current stream, and it preserves the current position afterwards. It writes into the current position of the destination stream. | Improve this Doc View Source WriteTo(String) Writes the complete stream into a file. Declaration public void WriteTo(string fileOut) Parameters Type Name Description String fileOut Output file path. Remarks It preserves the current position and creates any required directory. Implements System.IDisposable"
  },
  "api/Yarhl.IO.DataStreamFactory.html": {
    "href": "api/Yarhl.IO.DataStreamFactory.html",
    "title": "Class DataStreamFactory | SceneGate Yarhl",
    "keywords": "Class DataStreamFactory Factory of DataStream. Inheritance Object DataStreamFactory Namespace : Yarhl.IO Assembly : Yarhl.dll Syntax public static class DataStreamFactory Methods | Improve this Doc View Source FromArray(Byte[], Int32, Int32) Creates a new DataStream from an array of data. Declaration public static DataStream FromArray(byte[] data, int offset, int length) Parameters Type Name Description Byte [] data The array of data to use in the stream. Int32 offset Offset in the array of data. Int32 length Length of the new stream. Returns Type Description DataStream A new DataStream . | Improve this Doc View Source FromFile(String, FileOpenMode) Creates a new DataStream from a file. Declaration public static DataStream FromFile(string path, FileOpenMode mode) Parameters Type Name Description String path The path of the file. FileOpenMode mode The mode to open the file. Returns Type Description DataStream A new DataStream . | Improve this Doc View Source FromFile(String, FileOpenMode, Int64, Int64) Creates a new DataStream from a section of a file. Declaration public static DataStream FromFile(string path, FileOpenMode mode, long offset, long length) Parameters Type Name Description String path The path of the file. FileOpenMode mode The mode to open the file. Int64 offset Offset from the start of the file. Int64 length Length of the new stream. Returns Type Description DataStream A new DataStream . | Improve this Doc View Source FromMemory() Creates a new DataStream in memory. Declaration public static DataStream FromMemory() Returns Type Description DataStream A new DataStream . | Improve this Doc View Source FromStream(Stream) Creates a new DataStream from a Stream . Declaration public static DataStream FromStream(Stream stream) Parameters Type Name Description Stream stream The stream to use as a base. Returns Type Description DataStream A new DataStream . Remarks The dispose ownership is transferred to the new DataStream. | Improve this Doc View Source FromStream(Stream, Int64, Int64) Creates a new DataStream from a section of a Stream . Declaration public static DataStream FromStream(Stream stream, long offset, long length) Parameters Type Name Description Stream stream The stream to use as a base. Int64 offset Offset of the base stream. Int64 length Length of the new substream. Returns Type Description DataStream A new DataStream . Remarks The life-management of the stream is transferred to the DataStream . This means that disposing the new DataStream will potentially dispose the underlying stream. Check FromStreamKeepingOwnership(Stream, Int64, Int64) if you don't want this behavior. | Improve this Doc View Source FromStreamKeepingOwnership(Stream, Int64, Int64) Creates a new DataStream from a section of a Stream . Declaration public static DataStream FromStreamKeepingOwnership(Stream stream, long offset, long length) Parameters Type Name Description Stream stream The stream to use as a base. Int64 offset Offset of the base stream. Int64 length Length of the new substream. Returns Type Description DataStream A new DataStream . Remarks The dispose ownership is not transferred to the new DataStream . Instead, the caller is still responsible to dispose according the stream argument."
  },
  "api/Yarhl.IO.DataWriter.html": {
    "href": "api/Yarhl.IO.DataWriter.html",
    "title": "Class DataWriter | SceneGate Yarhl",
    "keywords": "Class DataWriter Binary writer for DataStreams. Inheritance Object DataWriter Namespace : Yarhl.IO Assembly : Yarhl.dll Syntax public class DataWriter Constructors | Improve this Doc View Source DataWriter(Stream) Initializes a new instance of the DataWriter class. Declaration public DataWriter(Stream stream) Parameters Type Name Description Stream stream Stream to write to. Remarks By default the endianess is LittleEndian and the encoding is UTF-8. Properties | Improve this Doc View Source DefaultEncoding Gets or sets the default encoding. Declaration public Encoding DefaultEncoding { get; set; } Property Value Type Description Encoding The default encoding. | Improve this Doc View Source Endianness Gets or sets the endianness. Declaration public EndiannessMode Endianness { get; set; } Property Value Type Description EndiannessMode The endianness. | Improve this Doc View Source Stream Gets the stream. Declaration public Stream Stream { get; } Property Value Type Description Stream The stream. Methods | Improve this Doc View Source Write(Byte) Write the specified 8-bits byte value. Declaration public void Write(byte val) Parameters Type Name Description Byte val Byte value. | Improve this Doc View Source Write(Byte[]) Write the specified byte buffer. Declaration public void Write(byte[] buffer) Parameters Type Name Description Byte [] buffer Byte buffer. | Improve this Doc View Source Write(Char, Encoding) Write the specified char using a text encoding. Declaration public void Write(char ch, Encoding encoding = null) Parameters Type Name Description Char ch Char to write. Encoding encoding Optional text encoding to use. Remarks If the encoding is null, it will use the default encoding. | Improve this Doc View Source Write(Char[], Encoding) Write the specified chars using a text encoding. Declaration public void Write(char[] chars, Encoding encoding = null) Parameters Type Name Description Char [] chars Char array to write. Encoding encoding Optional text encoding to use. Remarks If the encoding is null, it will use the default encoding. | Improve this Doc View Source Write(Double) Write the specified 64-bits IEEE 754 double precision floating point value. Declaration public void Write(double val) Parameters Type Name Description Double val Double precision floating point value. | Improve this Doc View Source Write(Int16) Write the specified 16-bits signed value. Declaration public void Write(short val) Parameters Type Name Description Int16 val 16-bits signed value. | Improve this Doc View Source Write(Int32) Write the specified 32-bits signed value. Declaration public void Write(int val) Parameters Type Name Description Int32 val 32-bits signed value. | Improve this Doc View Source Write(Int64) Write the specified 64-bits signed value. Declaration public void Write(long val) Parameters Type Name Description Int64 val 64-bits signed value. | Improve this Doc View Source Write(SByte) Write the specified 8-bits signed byte value. Declaration [CLSCompliant(false)] public void Write(sbyte val) Parameters Type Name Description SByte val Signed byte value. | Improve this Doc View Source Write(Single) Write the specified 32-bits IEEE 754 single precision floating point value. Declaration public void Write(float val) Parameters Type Name Description Single val Single precision floating point value. | Improve this Doc View Source Write(String, Boolean, Encoding, Int32) Write a text string. Declaration public void Write(string text, bool nullTerminator = true, Encoding encoding = null, int maxSize = -1) Parameters Type Name Description String text Text string to write. Boolean nullTerminator If set to true add null terminator. Encoding encoding Text encoding to use. Int32 maxSize Maximum size of the encoded string in bytes. Remarks If the encoding is null, it will use the default encoding. | Improve this Doc View Source Write(String, Int32, Boolean, Encoding) Write a text string with a fixed size. Declaration public void Write(string text, int fixedSize, bool nullTerminator = true, Encoding encoding = null) Parameters Type Name Description String text Text string to write. Int32 fixedSize Fixed size of the encoded string in bytes. Boolean nullTerminator If set to true add null terminator. Encoding encoding Text encoding to use. Remarks If the encoding is null, it will use the default encoding. | Improve this Doc View Source Write(String, Int32, String, Encoding) Write a text string with a fixed size and a custom terminator. Declaration public void Write(string text, int fixedSize, string terminator, Encoding encoding = null) Parameters Type Name Description String text Text string to write. Int32 fixedSize Fixed size of the encoded string in bytes. String terminator Token to add as terminator. If null, then no token will be added. Encoding encoding Text encoding to use. Remarks If the encoding is null, it will use the default encoding. | Improve this Doc View Source Write(String, String, Encoding, Int32) Write a text string using a custom terminator. Declaration public void Write(string text, string terminator, Encoding encoding = null, int maxSize = -1) Parameters Type Name Description String text Text string to write. String terminator Token to add as terminator. If null, then no token will be added. Encoding encoding Text encoding to use. Int32 maxSize Maximum size of the encoded string in bytes. Remarks If the encoding is null, it will use the default encoding. | Improve this Doc View Source Write(String, Type, Boolean, Encoding, Int32) Write a text string and its size. Declaration public void Write(string text, Type sizeType, bool nullTerminator = false, Encoding encoding = null, int maxSize = -1) Parameters Type Name Description String text Text string to write. Type sizeType Type of the string size to write. Boolean nullTerminator If set to true add null terminator. Encoding encoding Text encoding to use. Int32 maxSize Maximum size of the encoded string in bytes. Remarks If the encoding is null, it will use the default encoding. | Improve this Doc View Source Write(String, Type, String, Encoding, Int32) Write a text string and its size. Declaration public void Write(string text, Type sizeType, string terminator, Encoding encoding = null, int maxSize = -1) Parameters Type Name Description String text Text string to write. Type sizeType Type of the string size to write. String terminator Token to add as terminator. If null, then no token will be added. Encoding encoding Text encoding to use. Int32 maxSize Maximum size of the encoded string in bytes. Remarks If the encoding is null, it will use the default encoding. | Improve this Doc View Source Write(UInt16) Write the specified 16-bits unsigned value. Declaration [CLSCompliant(false)] public void Write(ushort val) Parameters Type Name Description UInt16 val 16-bits unsigned value. | Improve this Doc View Source Write(UInt32) Write the specified 32-bits unsigned value. Declaration [CLSCompliant(false)] public void Write(uint val) Parameters Type Name Description UInt32 val 32-bits unsigned value. | Improve this Doc View Source Write(UInt64) Write the specified 64-bits unsigned value. Declaration [CLSCompliant(false)] public void Write(ulong val) Parameters Type Name Description UInt64 val 64-bits unsigned value. | Improve this Doc View Source WriteOfType(Type, Object) Write the specified value converting to any supported type. Declaration public void WriteOfType(Type type, dynamic val) Parameters Type Name Description Type type Type of the value. Object val Value to write. Remarks The supported types are: long, ulong, int, uint, short, ushort, byte, sbyte, char and string. | Improve this Doc View Source WriteOfType<T>(T) Write the specified value forcing the type in the generic. Declaration public void WriteOfType<T>(T val) Parameters Type Name Description T val Value to write. Type Parameters Name Description T The type of the value. | Improve this Doc View Source WritePadding(Byte, Int32) Write the same byte to pad the stream. Declaration public void WritePadding(byte val, int padding) Parameters Type Name Description Byte val Value to repeat. Int32 padding Padding value. | Improve this Doc View Source WriteTimes(Byte, Int64) Writes the same byte the specified number of times. Declaration public void WriteTimes(byte val, long times) Parameters Type Name Description Byte val Value to write. Int64 times Number of times to write the byte. | Improve this Doc View Source WriteUntilLength(Byte, Int64) Writes the same byte until the given stream length is reached. Declaration public void WriteUntilLength(byte val, long length) Parameters Type Name Description Byte val Value to repeat. Int64 length Stream length to reach."
  },
  "api/Yarhl.IO.EndiannessMode.html": {
    "href": "api/Yarhl.IO.EndiannessMode.html",
    "title": "Enum EndiannessMode | SceneGate Yarhl",
    "keywords": "Enum EndiannessMode Endianness mode. Namespace : Yarhl.IO Assembly : Yarhl.dll Syntax public enum EndiannessMode Fields Name Description BigEndian Big endian. LittleEndian Little endian."
  },
  "api/Yarhl.IO.FileOpenMode.html": {
    "href": "api/Yarhl.IO.FileOpenMode.html",
    "title": "Enum FileOpenMode | SceneGate Yarhl",
    "keywords": "Enum FileOpenMode Mode to open files. Namespace : Yarhl.IO Assembly : Yarhl.dll Syntax public enum FileOpenMode Fields Name Description Append Open a file for appending data at the end. If the file doesn't exist it will throw an exception. Requires writing permissions. Read Open the file for reading. If the file doesn't exist it will throw a FileNotFound exception. Requires reading permissions. ReadWrite Open a file for reading and/or writing. If the file doesn't exist it wll be created. If the file exists it will start writing from the beginning but not truncated. Requires reading and writing permissions. Write Open a file for writing. If the file doesn't exist it will be created. If the file exists it will be truncated and start writing from the beginning. Requires writing permissions."
  },
  "api/Yarhl.IO.html": {
    "href": "api/Yarhl.IO.html",
    "title": "Namespace Yarhl.IO | SceneGate Yarhl",
    "keywords": "Namespace Yarhl.IO Classes BinaryFormat Binary format. DataReader Binary DataReader for DataStreams. DataStream Virtual Stream with substream capabilities and read/write abstraction layer. DataStreamFactory Factory of DataStream. DataWriter Binary writer for DataStreams. NumericExtension Extension methods for numeric types. TextDataReader Text reader for Stream . TextDataWriter Text writer for Stream . Interfaces IBinary Binary format. IStream Generic data stream interface. Enums EndiannessMode Endianness mode. FileOpenMode Mode to open files. SeekMode Seek mode for DataStream."
  },
  "api/Yarhl.IO.IBinary.html": {
    "href": "api/Yarhl.IO.IBinary.html",
    "title": "Interface IBinary | SceneGate Yarhl",
    "keywords": "Interface IBinary Binary format. Namespace : Yarhl.IO Assembly : Yarhl.dll Syntax public interface IBinary : IFormat Properties | Improve this Doc View Source Stream Gets the stream. Declaration DataStream Stream { get; } Property Value Type Description DataStream The stream."
  },
  "api/Yarhl.IO.IStream.html": {
    "href": "api/Yarhl.IO.IStream.html",
    "title": "Interface IStream | SceneGate Yarhl",
    "keywords": "Interface IStream Generic data stream interface. Inherited Members IDisposable.Dispose() Namespace : Yarhl.IO Assembly : Yarhl.dll Syntax public interface IStream : IDisposable Properties | Improve this Doc View Source Disposed Gets a value indicating whether this IStream has been disposed. Declaration bool Disposed { get; } Property Value Type Description Boolean | Improve this Doc View Source Length Gets the length of this stream. Declaration long Length { get; } Property Value Type Description Int64 | Improve this Doc View Source LockObj Gets the lock object of this stream (and all its substreams). Declaration object LockObj { get; } Property Value Type Description Object | Improve this Doc View Source Position Gets or sets the position from the start of this stream. Declaration long Position { get; set; } Property Value Type Description Int64 Methods | Improve this Doc View Source Flush() Clears all buffers for this stream and causes any buffered data to be written to the underlying device. Declaration void Flush() | Improve this Doc View Source Read(Byte[], Int32, Int32) Reads from the stream to the buffer. Declaration int Read(byte[] buffer, int index, int count) Parameters Type Name Description Byte [] buffer Buffer to copy data. Int32 index Index to start copying in buffer. Int32 count Number of bytes to read. Returns Type Description Int32 The number of bytes read. | Improve this Doc View Source ReadByte() Reads the next byte. Declaration byte ReadByte() Returns Type Description Byte The next byte. | Improve this Doc View Source SetLength(Int64) Sets the length of the stream. Declaration void SetLength(long length) Parameters Type Name Description Int64 length The new length of the stream. Remarks Some streams may not implement or support changing the length. | Improve this Doc View Source Write(Byte[], Int32, Int32) Writes the a portion of the buffer to the stream. Declaration void Write(byte[] buffer, int index, int count) Parameters Type Name Description Byte [] buffer Buffer to write. Int32 index Index in the buffer. Int32 count Bytes to write. | Improve this Doc View Source WriteByte(Byte) Writes a byte. Declaration void WriteByte(byte data) Parameters Type Name Description Byte data Byte value."
  },
  "api/Yarhl.IO.NumericExtension.html": {
    "href": "api/Yarhl.IO.NumericExtension.html",
    "title": "Class NumericExtension | SceneGate Yarhl",
    "keywords": "Class NumericExtension Extension methods for numeric types. Inheritance Object NumericExtension Namespace : Yarhl.IO Assembly : Yarhl.dll Syntax public static class NumericExtension Methods | Improve this Doc View Source Pad(Int16, Int32) Pad the specified address. Declaration public static short Pad(this short address, int padding) Parameters Type Name Description Int16 address Address to pad. Int32 padding Padding target. Returns Type Description Int16 The address padded. | Improve this Doc View Source Pad(Int32, Int32) Pad the specified address. Declaration public static int Pad(this int address, int padding) Parameters Type Name Description Int32 address Address to pad. Int32 padding Padding target. Returns Type Description Int32 The address padded. | Improve this Doc View Source Pad(Int64, Int64) Pad the specified address. Declaration public static long Pad(this long address, long padding) Parameters Type Name Description Int64 address Address to pad. Int64 padding Padding target. Returns Type Description Int64 The address padded. | Improve this Doc View Source Pad(UInt16, Int32) Pad the specified address. Declaration [CLSCompliant(false)] public static ushort Pad(this ushort address, int padding) Parameters Type Name Description UInt16 address Address to pad. Int32 padding Padding target. Returns Type Description UInt16 The address padded. | Improve this Doc View Source Pad(UInt32, Int32) Pad the specified address. Declaration [CLSCompliant(false)] public static uint Pad(this uint address, int padding) Parameters Type Name Description UInt32 address Address to pad. Int32 padding Padding target. Returns Type Description UInt32 The address padded. | Improve this Doc View Source Pad(UInt64, UInt64) Pad the specified address. Declaration [CLSCompliant(false)] public static ulong Pad(this ulong address, ulong padding) Parameters Type Name Description UInt64 address Address to pad. UInt64 padding Padding target. Returns Type Description UInt64 The address padded."
  },
  "api/Yarhl.IO.SeekMode.html": {
    "href": "api/Yarhl.IO.SeekMode.html",
    "title": "Enum SeekMode | SceneGate Yarhl",
    "keywords": "Enum SeekMode Seek mode for DataStream. Namespace : Yarhl.IO Assembly : Yarhl.dll Syntax [Obsolete(\"Use overloads with System.IO.SeekOrigin\")] public enum SeekMode Fields Name Description Current Position from the current position. End Position going back from the end of the DataStream. Start Position from the origin of the DataStream."
  },
  "api/Yarhl.IO.Serialization.Attributes.BinaryBooleanAttribute.html": {
    "href": "api/Yarhl.IO.Serialization.Attributes.BinaryBooleanAttribute.html",
    "title": "Class BinaryBooleanAttribute | SceneGate Yarhl",
    "keywords": "Class BinaryBooleanAttribute Define how to read and write a boolean value. Default type is Int32 Inheritance Object Attribute BinaryBooleanAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Namespace : Yarhl.IO.Serialization.Attributes Assembly : Yarhl.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class BinaryBooleanAttribute : Attribute Constructors | Improve this Doc View Source BinaryBooleanAttribute() Initializes a new instance of the BinaryBooleanAttribute class. Declaration public BinaryBooleanAttribute() Properties | Improve this Doc View Source FalseValue Gets or sets the value equals to false. Declaration public object FalseValue { get; set; } Property Value Type Description Object | Improve this Doc View Source ReadAs Gets or sets the equivalent type for reading. Declaration public Type ReadAs { get; set; } Property Value Type Description Type | Improve this Doc View Source TrueValue Gets or sets the value equals to true. Declaration public object TrueValue { get; set; } Property Value Type Description Object | Improve this Doc View Source WriteAs Gets or sets the equivalent type for writing. Declaration public Type WriteAs { get; set; } Property Value Type Description Type"
  },
  "api/Yarhl.IO.Serialization.Attributes.BinaryEnumAttribute.html": {
    "href": "api/Yarhl.IO.Serialization.Attributes.BinaryEnumAttribute.html",
    "title": "Class BinaryEnumAttribute | SceneGate Yarhl",
    "keywords": "Class BinaryEnumAttribute Define how to read and write a Enum value. Default type is Int32 Inheritance Object Attribute BinaryEnumAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Namespace : Yarhl.IO.Serialization.Attributes Assembly : Yarhl.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class BinaryEnumAttribute : Attribute Constructors | Improve this Doc View Source BinaryEnumAttribute() Initializes a new instance of the BinaryEnumAttribute class. Declaration public BinaryEnumAttribute() Properties | Improve this Doc View Source ReadAs Gets or sets the equivalent type for reading. Declaration public Type ReadAs { get; set; } Property Value Type Description Type | Improve this Doc View Source WriteAs Gets or sets the equivalent type for writing. Declaration public Type WriteAs { get; set; } Property Value Type Description Type"
  },
  "api/Yarhl.IO.Serialization.Attributes.BinaryForceEndiannessAttribute.html": {
    "href": "api/Yarhl.IO.Serialization.Attributes.BinaryForceEndiannessAttribute.html",
    "title": "Class BinaryForceEndiannessAttribute | SceneGate Yarhl",
    "keywords": "Class BinaryForceEndiannessAttribute Set to force the endianness in automatic serialization. Inheritance Object Attribute BinaryForceEndiannessAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Namespace : Yarhl.IO.Serialization.Attributes Assembly : Yarhl.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class BinaryForceEndiannessAttribute : Attribute Constructors | Improve this Doc View Source BinaryForceEndiannessAttribute(EndiannessMode) Initializes a new instance of the BinaryForceEndiannessAttribute class. Declaration public BinaryForceEndiannessAttribute(EndiannessMode mode) Parameters Type Name Description EndiannessMode mode Endianness mode for the property. Properties | Improve this Doc View Source Mode Gets the endianness mode. Declaration public EndiannessMode Mode { get; } Property Value Type Description EndiannessMode"
  },
  "api/Yarhl.IO.Serialization.Attributes.BinaryIgnoreAttribute.html": {
    "href": "api/Yarhl.IO.Serialization.Attributes.BinaryIgnoreAttribute.html",
    "title": "Class BinaryIgnoreAttribute | SceneGate Yarhl",
    "keywords": "Class BinaryIgnoreAttribute Set to ignore the property when serializing. Inheritance Object Attribute BinaryIgnoreAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Namespace : Yarhl.IO.Serialization.Attributes Assembly : Yarhl.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class BinaryIgnoreAttribute : Attribute"
  },
  "api/Yarhl.IO.Serialization.Attributes.BinaryInt24Attribute.html": {
    "href": "api/Yarhl.IO.Serialization.Attributes.BinaryInt24Attribute.html",
    "title": "Class BinaryInt24Attribute | SceneGate Yarhl",
    "keywords": "Class BinaryInt24Attribute Property is an Int24 value. Inheritance Object Attribute BinaryInt24Attribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Namespace : Yarhl.IO.Serialization.Attributes Assembly : Yarhl.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class BinaryInt24Attribute : Attribute"
  },
  "api/Yarhl.IO.Serialization.Attributes.BinaryStringAttribute.html": {
    "href": "api/Yarhl.IO.Serialization.Attributes.BinaryStringAttribute.html",
    "title": "Class BinaryStringAttribute | SceneGate Yarhl",
    "keywords": "Class BinaryStringAttribute Define how to read and write a string value. Inheritance Object Attribute BinaryStringAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Namespace : Yarhl.IO.Serialization.Attributes Assembly : Yarhl.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class BinaryStringAttribute : Attribute Constructors | Improve this Doc View Source BinaryStringAttribute() Initializes a new instance of the BinaryStringAttribute class. Declaration public BinaryStringAttribute() Properties | Improve this Doc View Source CodePage Gets or sets the string code page. Set to -1 to use the reader/writer encoding. Declaration public int CodePage { get; set; } Property Value Type Description Int32 | Improve this Doc View Source FixedSize Gets or sets the fixed size (in bytes) of the string. Set to -1 if the string is length variable. Declaration public int FixedSize { get; set; } Property Value Type Description Int32 | Improve this Doc View Source MaxSize Gets or sets the max size (in bytes) of the string. Set to -1 if the string has no max size. Declaration public int MaxSize { get; set; } Property Value Type Description Int32 | Improve this Doc View Source SizeType Gets or sets the size value type. Set to null if string doesn't have the length serialized. Declaration public Type SizeType { get; set; } Property Value Type Description Type | Improve this Doc View Source Terminator Gets or sets the string terminator. Declaration public string Terminator { get; set; } Property Value Type Description String"
  },
  "api/Yarhl.IO.Serialization.Attributes.html": {
    "href": "api/Yarhl.IO.Serialization.Attributes.html",
    "title": "Namespace Yarhl.IO.Serialization.Attributes | SceneGate Yarhl",
    "keywords": "Namespace Yarhl.IO.Serialization.Attributes Classes BinaryBooleanAttribute Define how to read and write a boolean value. Default type is Int32 BinaryEnumAttribute Define how to read and write a Enum value. Default type is Int32 BinaryForceEndiannessAttribute Set to force the endianness in automatic serialization. BinaryIgnoreAttribute Set to ignore the property when serializing. BinaryInt24Attribute Property is an Int24 value. BinaryStringAttribute Define how to read and write a string value. SerializableAttribute Set to enable automatic serialization."
  },
  "api/Yarhl.IO.Serialization.Attributes.SerializableAttribute.html": {
    "href": "api/Yarhl.IO.Serialization.Attributes.SerializableAttribute.html",
    "title": "Class SerializableAttribute | SceneGate Yarhl",
    "keywords": "Class SerializableAttribute Set to enable automatic serialization. Inheritance Object Attribute SerializableAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Namespace : Yarhl.IO.Serialization.Attributes Assembly : Yarhl.dll Syntax [AttributeUsage(AttributeTargets.Class)] public sealed class SerializableAttribute : Attribute"
  },
  "api/Yarhl.IO.StreamFormat.html": {
    "href": "api/Yarhl.IO.StreamFormat.html",
    "title": "Namespace Yarhl.IO.StreamFormat | SceneGate Yarhl",
    "keywords": "Namespace Yarhl.IO.StreamFormat Classes LazyFileStream Open file for reading or writing on the first operation (lazily). RecyclableMemoryStream In-memory stream with a pool of buffers. StreamWrapper Wrapper over .NET streams."
  },
  "api/Yarhl.IO.StreamFormat.LazyFileStream.html": {
    "href": "api/Yarhl.IO.StreamFormat.LazyFileStream.html",
    "title": "Class LazyFileStream | SceneGate Yarhl",
    "keywords": "Class LazyFileStream Open file for reading or writing on the first operation (lazily). Inheritance Object StreamWrapper LazyFileStream Implements IStream IDisposable Inherited Members StreamWrapper.BaseStream StreamWrapper.LockObj StreamWrapper.Position StreamWrapper.Disposed StreamWrapper.Flush() StreamWrapper.Dispose() StreamWrapper.Dispose(Boolean) Namespace : Yarhl.IO.StreamFormat Assembly : Yarhl.dll Syntax public sealed class LazyFileStream : StreamWrapper, IStream, IDisposable Constructors | Improve this Doc View Source LazyFileStream(String, FileOpenMode) Initializes a new instance of the LazyFileStream class. Declaration public LazyFileStream(string path, FileOpenMode mode) Parameters Type Name Description String path Path to the file. FileOpenMode mode Mode to open the file. Properties | Improve this Doc View Source Length Gets the length of this stream. Declaration public override long Length { get; } Property Value Type Description Int64 Overrides StreamWrapper.Length Methods | Improve this Doc View Source Read(Byte[], Int32, Int32) Reads from the stream to the buffer. Declaration public override int Read(byte[] buffer, int index, int count) Parameters Type Name Description Byte [] buffer Buffer to copy data. Int32 index Index to start copying in buffer. Int32 count Number of bytes to read. Returns Type Description Int32 The number of bytes read. Overrides StreamWrapper.Read(Byte[], Int32, Int32) | Improve this Doc View Source ReadByte() Reads the next byte. Declaration public override byte ReadByte() Returns Type Description Byte The next byte. Overrides StreamWrapper.ReadByte() | Improve this Doc View Source SetLength(Int64) Sets the length of the stream. Declaration public override void SetLength(long length) Parameters Type Name Description Int64 length The new length of the stream. Overrides StreamWrapper.SetLength(Int64) | Improve this Doc View Source Write(Byte[], Int32, Int32) Writes the a portion of the buffer to the stream. Declaration public override void Write(byte[] buffer, int index, int count) Parameters Type Name Description Byte [] buffer Buffer to write. Int32 index Index in the buffer. Int32 count Bytes to write. Overrides StreamWrapper.Write(Byte[], Int32, Int32) | Improve this Doc View Source WriteByte(Byte) Writes a byte. Declaration public override void WriteByte(byte data) Parameters Type Name Description Byte data Byte value. Overrides StreamWrapper.WriteByte(Byte) Implements IStream System.IDisposable"
  },
  "api/Yarhl.IO.StreamFormat.RecyclableMemoryStream.html": {
    "href": "api/Yarhl.IO.StreamFormat.RecyclableMemoryStream.html",
    "title": "Class RecyclableMemoryStream | SceneGate Yarhl",
    "keywords": "Class RecyclableMemoryStream In-memory stream with a pool of buffers. Inheritance Object StreamWrapper RecyclableMemoryStream Implements IStream IDisposable Inherited Members StreamWrapper.BaseStream StreamWrapper.LockObj StreamWrapper.Position StreamWrapper.Length StreamWrapper.Disposed StreamWrapper.Flush() StreamWrapper.Read(Byte[], Int32, Int32) StreamWrapper.ReadByte() StreamWrapper.Write(Byte[], Int32, Int32) StreamWrapper.WriteByte(Byte) StreamWrapper.Dispose() StreamWrapper.Dispose(Boolean) Namespace : Yarhl.IO.StreamFormat Assembly : Yarhl.dll Syntax public sealed class RecyclableMemoryStream : StreamWrapper, IStream, IDisposable Constructors | Improve this Doc View Source RecyclableMemoryStream() Initializes a new instance of the RecyclableMemoryStream class. Declaration public RecyclableMemoryStream() Methods | Improve this Doc View Source SetLength(Int64) Sets the length of the stream. Declaration public override void SetLength(long length) Parameters Type Name Description Int64 length The new length of the stream. Overrides StreamWrapper.SetLength(Int64) Implements IStream System.IDisposable"
  },
  "api/Yarhl.IO.StreamFormat.StreamWrapper.html": {
    "href": "api/Yarhl.IO.StreamFormat.StreamWrapper.html",
    "title": "Class StreamWrapper | SceneGate Yarhl",
    "keywords": "Class StreamWrapper Wrapper over .NET streams. Inheritance Object StreamWrapper LazyFileStream RecyclableMemoryStream Implements IStream IDisposable Namespace : Yarhl.IO.StreamFormat Assembly : Yarhl.dll Syntax public class StreamWrapper : IStream, IDisposable Constructors | Improve this Doc View Source StreamWrapper() Initializes a new instance of the StreamWrapper class. Declaration protected StreamWrapper() | Improve this Doc View Source StreamWrapper(Stream) Initializes a new instance of the StreamWrapper class. Declaration public StreamWrapper(Stream stream) Parameters Type Name Description Stream stream The stream to wrap. Properties | Improve this Doc View Source BaseStream Gets or sets the base stream. Declaration public Stream BaseStream { get; protected set; } Property Value Type Description Stream | Improve this Doc View Source Disposed Gets a value indicating whether this IStream has been disposed. Declaration public bool Disposed { get; } Property Value Type Description Boolean | Improve this Doc View Source Length Gets the length of this stream. Declaration public virtual long Length { get; } Property Value Type Description Int64 | Improve this Doc View Source LockObj Gets the lock object of this stream (and all its substreams). Declaration public object LockObj { get; } Property Value Type Description Object | Improve this Doc View Source Position Gets or sets the position from the start of this stream. Declaration public long Position { get; set; } Property Value Type Description Int64 Methods | Improve this Doc View Source Dispose() Releases all resource used by the StreamWrapper object. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Releases all resource used by the StreamWrapper object. Declaration protected virtual void Dispose(bool freeManaged) Parameters Type Name Description Boolean freeManaged If set to true free managed resources also. | Improve this Doc View Source Flush() Clears all buffers for this stream and causes any buffered data to be written to the underlying device. Declaration public virtual void Flush() | Improve this Doc View Source Read(Byte[], Int32, Int32) Reads from the stream to the buffer. Declaration public virtual int Read(byte[] buffer, int index, int count) Parameters Type Name Description Byte [] buffer Buffer to copy data. Int32 index Index to start copying in buffer. Int32 count Number of bytes to read. Returns Type Description Int32 The number of bytes read. | Improve this Doc View Source ReadByte() Reads the next byte. Declaration public virtual byte ReadByte() Returns Type Description Byte The next byte. | Improve this Doc View Source SetLength(Int64) Sets the length of the stream. Declaration public virtual void SetLength(long length) Parameters Type Name Description Int64 length The new length of the stream. | Improve this Doc View Source Write(Byte[], Int32, Int32) Writes the a portion of the buffer to the stream. Declaration public virtual void Write(byte[] buffer, int index, int count) Parameters Type Name Description Byte [] buffer Buffer to write. Int32 index Index in the buffer. Int32 count Bytes to write. | Improve this Doc View Source WriteByte(Byte) Writes a byte. Declaration public virtual void WriteByte(byte data) Parameters Type Name Description Byte data Byte value. Implements IStream System.IDisposable"
  },
  "api/Yarhl.IO.TextDataReader.html": {
    "href": "api/Yarhl.IO.TextDataReader.html",
    "title": "Class TextDataReader | SceneGate Yarhl",
    "keywords": "Class TextDataReader Text reader for Stream . Inheritance Object TextDataReader Namespace : Yarhl.IO Assembly : Yarhl.dll Syntax public class TextDataReader Constructors | Improve this Doc View Source TextDataReader(Stream) Initializes a new instance of the TextDataReader class. Declaration public TextDataReader(Stream stream) Parameters Type Name Description Stream stream Stream to read from. Remarks The default encoding is UTF-8. | Improve this Doc View Source TextDataReader(Stream, String) Initializes a new instance of the TextDataReader class. Declaration public TextDataReader(Stream stream, string encoding) Parameters Type Name Description Stream stream Stream to read from. String encoding Encoding to use. | Improve this Doc View Source TextDataReader(Stream, Encoding) Initializes a new instance of the TextDataReader class. Declaration public TextDataReader(Stream stream, Encoding encoding) Parameters Type Name Description Stream stream Stream to read from. Encoding encoding Encoding to use. Properties | Improve this Doc View Source AutoNewLine Gets or sets a value indicating whether reads any kind of NewLine format (\\r\\n or \\n). If true, this ignore the NewLine field. Declaration public bool AutoNewLine { get; set; } Property Value Type Description Boolean If true, it will treat new lines any matching of \\r\\n or \\n. Otherwise false. | Improve this Doc View Source Encoding Gets the encoding. Declaration public Encoding Encoding { get; } Property Value Type Description Encoding | Improve this Doc View Source NewLine Gets or sets the new line and set to false AutoNewLine. Declaration public string NewLine { get; set; } Property Value Type Description String The new line. Remarks The default value is OS-dependant. | Improve this Doc View Source Stream Gets the stream. Declaration public Stream Stream { get; } Property Value Type Description Stream Methods | Improve this Doc View Source Peek() Read the next char without changing the position. Declaration public char Peek() Returns Type Description Char The next char. | Improve this Doc View Source Peek(Int32) Read the next count of chars without changing the position. Declaration public char[] Peek(int count) Parameters Type Name Description Int32 count Number of chars to read. Returns Type Description Char [] The next chars. | Improve this Doc View Source PeekLine() Read the next line without changing the position. Declaration public string PeekLine() Returns Type Description String The next line. | Improve this Doc View Source PeekToToken(String) Read until a string / token is found without changing the position. Declaration public string PeekToToken(string token) Parameters Type Name Description String token Token to find. Returns Type Description String The next chars. | Improve this Doc View Source Read() Read a char from the stream. Declaration public char Read() Returns Type Description Char The read char. | Improve this Doc View Source Read(Int32) Read the specified number of chars. Declaration public char[] Read(int count) Parameters Type Name Description Int32 count Chars to read. Returns Type Description Char [] The read chars. | Improve this Doc View Source ReadLine() Reads a line. Declaration public string ReadLine() Returns Type Description String The line. | Improve this Doc View Source ReadToEnd() Reads to the end. Declaration public string ReadToEnd() Returns Type Description String The string. | Improve this Doc View Source ReadToToken(String) Reads a string until a string / token is found. Declaration public string ReadToToken(string token) Parameters Type Name Description String token Token to find. Returns Type Description String The read string."
  },
  "api/Yarhl.IO.TextDataWriter.html": {
    "href": "api/Yarhl.IO.TextDataWriter.html",
    "title": "Class TextDataWriter | SceneGate Yarhl",
    "keywords": "Class TextDataWriter Text writer for Stream . Inheritance Object TextDataWriter Namespace : Yarhl.IO Assembly : Yarhl.dll Syntax public class TextDataWriter Constructors | Improve this Doc View Source TextDataWriter(Stream) Initializes a new instance of the TextDataWriter class. Declaration public TextDataWriter(Stream stream) Parameters Type Name Description Stream stream Stream to write to. Remarks The default encoding is UTF-8. | Improve this Doc View Source TextDataWriter(Stream, String) Initializes a new instance of the TextDataWriter class. Declaration public TextDataWriter(Stream stream, string encoding) Parameters Type Name Description Stream stream Stream to read from. String encoding Encoding to use. | Improve this Doc View Source TextDataWriter(Stream, Encoding) Initializes a new instance of the TextDataWriter class. Declaration public TextDataWriter(Stream stream, Encoding encoding) Parameters Type Name Description Stream stream Stream to write to. Encoding encoding Encoding to use. Properties | Improve this Doc View Source AutoPreamble Gets or sets a value indicating whether write automatically the encoding preamble. Declaration public bool AutoPreamble { get; set; } Property Value Type Description Boolean True to write the preamble if the stream is empty, otherwise false. | Improve this Doc View Source Encoding Gets the encoding. Declaration public Encoding Encoding { get; } Property Value Type Description Encoding | Improve this Doc View Source NewLine Gets or sets the new line character. Declaration public string NewLine { get; set; } Property Value Type Description String The new line character. Remarks The default value is \\n, the Unix new line. | Improve this Doc View Source Stream Gets the stream. Declaration public Stream Stream { get; } Property Value Type Description Stream Methods | Improve this Doc View Source Write(Char) Write the specified char. Declaration public void Write(char ch) Parameters Type Name Description Char ch Char to write. | Improve this Doc View Source Write(Char[]) Write the specified chars. Declaration public void Write(char[] chars) Parameters Type Name Description Char [] chars Chars to write. | Improve this Doc View Source Write(String) Write the specified text without including a new line. Declaration public void Write(string text) Parameters Type Name Description String text Text to write. | Improve this Doc View Source Write(String, Object[]) Write the specified text with format. Declaration public void Write(string format, params object[] args) Parameters Type Name Description String format Format for the text. Object [] args Arguments for the format. | Improve this Doc View Source WriteLine() Writes a new line. Declaration public void WriteLine() | Improve this Doc View Source WriteLine(String) Writes the specified text and add a new line. Declaration public void WriteLine(string text) Parameters Type Name Description String text Text to write. | Improve this Doc View Source WriteLine(String, Object[]) Writes the specified text with format. Declaration public void WriteLine(string format, params object[] args) Parameters Type Name Description String format Format for the text. Object [] args Arguments of the format. | Improve this Doc View Source WritePreamble() Write the encoding preamble. Declaration public void WritePreamble()"
  },
  "api/Yarhl.Media.Text.Binary2Po.html": {
    "href": "api/Yarhl.Media.Text.Binary2Po.html",
    "title": "Class Binary2Po | SceneGate Yarhl",
    "keywords": "Class Binary2Po Binary to Po converter. Inheritance Object Binary2Po Implements IConverter < IBinary , Po > IConverter Namespace : Yarhl.Media.Text Assembly : Yarhl.Media.dll Syntax public class Binary2Po : IConverter<IBinary, Po>, IConverter Methods | Improve this Doc View Source Convert(IBinary) Convert the specified Binary stream into a PO object. Declaration public Po Convert(IBinary source) Parameters Type Name Description IBinary source Source binary stream. Returns Type Description Po The converted PO object. Implements IConverter<TSrc, TDst> IConverter"
  },
  "api/Yarhl.Media.Text.Encodings.EscapeOutRangeEncoding.html": {
    "href": "api/Yarhl.Media.Text.Encodings.EscapeOutRangeEncoding.html",
    "title": "Class EscapeOutRangeEncoding | SceneGate Yarhl",
    "keywords": "Class EscapeOutRangeEncoding Provides an encoding for encode and decode symbols out of range of any encoding. Inheritance Object Encoding EscapeOutRangeEncoding Implements ICloneable Inherited Members Encoding.Clone() Encoding.Convert(Encoding, Encoding, Byte[]) Encoding.Convert(Encoding, Encoding, Byte[], Int32, Int32) Encoding.Equals(Object) Encoding.GetByteCount(Char*, Int32) Encoding.GetByteCount(Char[]) Encoding.GetByteCount(String) Encoding.GetBytes(Char*, Int32, Byte*, Int32) Encoding.GetBytes(Char[]) Encoding.GetBytes(Char[], Int32, Int32) Encoding.GetBytes(String) Encoding.GetBytes(String, Int32, Int32, Byte[], Int32) Encoding.GetCharCount(Byte*, Int32) Encoding.GetCharCount(Byte[]) Encoding.GetChars(Byte*, Int32, Char*, Int32) Encoding.GetChars(Byte[]) Encoding.GetChars(Byte[], Int32, Int32) Encoding.GetDecoder() Encoding.GetEncoder() Encoding.GetEncoding(Int32) Encoding.GetEncoding(Int32, EncoderFallback, DecoderFallback) Encoding.GetEncoding(String) Encoding.GetEncoding(String, EncoderFallback, DecoderFallback) Encoding.GetEncodings() Encoding.GetHashCode() Encoding.GetPreamble() Encoding.GetString(Byte*, Int32) Encoding.GetString(Byte[]) Encoding.GetString(Byte[], Int32, Int32) Encoding.IsAlwaysNormalized() Encoding.IsAlwaysNormalized(NormalizationForm) Encoding.RegisterProvider(EncodingProvider) Encoding.ASCII Encoding.BigEndianUnicode Encoding.BodyName Encoding.CodePage Encoding.DecoderFallback Encoding.Default Encoding.EncoderFallback Encoding.EncodingName Encoding.HeaderName Encoding.IsBrowserDisplay Encoding.IsBrowserSave Encoding.IsMailNewsDisplay Encoding.IsMailNewsSave Encoding.IsReadOnly Encoding.IsSingleByte Encoding.Unicode Encoding.UTF32 Encoding.UTF7 Encoding.UTF8 Encoding.WebName Encoding.WindowsCodePage Namespace : Yarhl.Media.Text.Encodings Assembly : Yarhl.Media.dll Syntax public class EscapeOutRangeEncoding : Encoding, ICloneable Constructors | Improve this Doc View Source EscapeOutRangeEncoding(String) Initializes a new instance of the EscapeOutRangeEncoding class. Declaration public EscapeOutRangeEncoding(string baseEncodingName) Parameters Type Name Description String baseEncodingName Base encoding name. | Improve this Doc View Source EscapeOutRangeEncoding(Encoding) Initializes a new instance of the EscapeOutRangeEncoding class. Declaration public EscapeOutRangeEncoding(Encoding encoding) Parameters Type Name Description Encoding encoding Base encoding. Remarks For correct usage, make sure that your encoding uses the Yarhl.Media.Text.Encodings.EscapeOutRangeEncoding.EscapeOutRangeDecoderFallback as the decoder fallback. Properties | Improve this Doc View Source TokenEnd Gets the end of the token for invalid symbols. Declaration public static string TokenEnd { get; } Property Value Type Description String The token end. | Improve this Doc View Source TokenStart Gets the start of the token for invalid symbols. Declaration public static string TokenStart { get; } Property Value Type Description String The token start. Methods | Improve this Doc View Source GetByteCount(Char[], Int32, Int32) Gets the byte count. Declaration public override int GetByteCount(char[] chars, int index, int count) Parameters Type Name Description Char [] chars Chars to convert. Int32 index Index of the char array. Int32 count Count in the char array. Returns Type Description Int32 The byte count. Overrides Encoding.GetByteCount(Char[], Int32, Int32) | Improve this Doc View Source GetBytes(Char[], Int32, Int32, Byte[], Int32) Gets the encoded bytes. Declaration public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex) Parameters Type Name Description Char [] chars Chars to convert. Int32 charIndex Index in the char array. Int32 charCount Number of chars to convert. Byte [] bytes Output byte array. Int32 byteIndex Indes in the byte array. Returns Type Description Int32 The encoded bytes. Overrides Encoding.GetBytes(Char[], Int32, Int32, Byte[], Int32) | Improve this Doc View Source GetCharCount(Byte[], Int32, Int32) Gets the char count. Declaration public override int GetCharCount(byte[] bytes, int index, int count) Parameters Type Name Description Byte [] bytes Bytes to convert. Int32 index Index of the byte array. Int32 count Count of the byte array. Returns Type Description Int32 The char count. Overrides Encoding.GetCharCount(Byte[], Int32, Int32) | Improve this Doc View Source GetChars(Byte[], Int32, Int32, Char[], Int32) Gets the decoded chars. Declaration public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) Parameters Type Name Description Byte [] bytes Encoded bytes. Int32 byteIndex Index in the encoded bytes. Int32 byteCount Number of bytes to decoded. Char [] chars Output char array. Int32 charIndex Index in the char array. Returns Type Description Int32 The decoded chars. Overrides Encoding.GetChars(Byte[], Int32, Int32, Char[], Int32) | Improve this Doc View Source GetMaxByteCount(Int32) Gets the max byte count. Declaration public override int GetMaxByteCount(int charCount) Parameters Type Name Description Int32 charCount Char count. Returns Type Description Int32 The max byte count. Overrides Encoding.GetMaxByteCount(Int32) | Improve this Doc View Source GetMaxCharCount(Int32) Gets the max char count. Declaration public override int GetMaxCharCount(int byteCount) Parameters Type Name Description Int32 byteCount Byte count. Returns Type Description Int32 The max char count. Overrides Encoding.GetMaxCharCount(Int32) Implements System.ICloneable"
  },
  "api/Yarhl.Media.Text.Encodings.EucJpEncoding.html": {
    "href": "api/Yarhl.Media.Text.Encodings.EucJpEncoding.html",
    "title": "Class EucJpEncoding | SceneGate Yarhl",
    "keywords": "Class EucJpEncoding EUC-JP encoding. Implemented standard from: https://encoding.spec.whatwg.org/ . Inheritance Object Encoding EucJpEncoding Implements ICloneable Inherited Members Encoding.Clone() Encoding.Convert(Encoding, Encoding, Byte[]) Encoding.Convert(Encoding, Encoding, Byte[], Int32, Int32) Encoding.Equals(Object) Encoding.GetByteCount(Char*, Int32) Encoding.GetByteCount(Char[]) Encoding.GetByteCount(String) Encoding.GetBytes(Char*, Int32, Byte*, Int32) Encoding.GetBytes(Char[]) Encoding.GetBytes(Char[], Int32, Int32) Encoding.GetBytes(String) Encoding.GetBytes(String, Int32, Int32, Byte[], Int32) Encoding.GetCharCount(Byte*, Int32) Encoding.GetCharCount(Byte[]) Encoding.GetChars(Byte*, Int32, Char*, Int32) Encoding.GetChars(Byte[]) Encoding.GetChars(Byte[], Int32, Int32) Encoding.GetDecoder() Encoding.GetEncoder() Encoding.GetEncoding(Int32) Encoding.GetEncoding(Int32, EncoderFallback, DecoderFallback) Encoding.GetEncoding(String) Encoding.GetEncoding(String, EncoderFallback, DecoderFallback) Encoding.GetEncodings() Encoding.GetHashCode() Encoding.GetPreamble() Encoding.GetString(Byte*, Int32) Encoding.GetString(Byte[]) Encoding.GetString(Byte[], Int32, Int32) Encoding.IsAlwaysNormalized() Encoding.IsAlwaysNormalized(NormalizationForm) Encoding.RegisterProvider(EncodingProvider) Encoding.ASCII Encoding.BigEndianUnicode Encoding.BodyName Encoding.CodePage Encoding.Default Encoding.EncodingName Encoding.HeaderName Encoding.IsBrowserDisplay Encoding.IsBrowserSave Encoding.IsMailNewsDisplay Encoding.IsMailNewsSave Encoding.IsReadOnly Encoding.IsSingleByte Encoding.Unicode Encoding.UTF32 Encoding.UTF7 Encoding.UTF8 Encoding.WebName Encoding.WindowsCodePage Namespace : Yarhl.Media.Text.Encodings Assembly : Yarhl.Media.dll Syntax public sealed class EucJpEncoding : Encoding, ICloneable Constructors | Improve this Doc View Source EucJpEncoding() Initializes a new instance of the EucJpEncoding class. Declaration public EucJpEncoding() | Improve this Doc View Source EucJpEncoding(DecoderFallback, EncoderFallback) Initializes a new instance of the EucJpEncoding class. Declaration public EucJpEncoding(DecoderFallback decFallback, EncoderFallback encFallback) Parameters Type Name Description DecoderFallback decFallback Decoder fallback. EncoderFallback encFallback Encoder fallback. Properties | Improve this Doc View Source DecoderFallback Gets the decoder fallback. Declaration public DecoderFallback DecoderFallback { get; } Property Value Type Description DecoderFallback The decoder fallback. | Improve this Doc View Source EncoderFallback Gets the encoder fallback. Declaration public EncoderFallback EncoderFallback { get; } Property Value Type Description EncoderFallback The encoder fallback. Methods | Improve this Doc View Source GetByteCount(Char[], Int32, Int32) Gets the byte count. Declaration public override int GetByteCount(char[] chars, int index, int count) Parameters Type Name Description Char [] chars Chars to convert. Int32 index Index of the char array. Int32 count Count in the char array. Returns Type Description Int32 The byte count. Overrides Encoding.GetByteCount(Char[], Int32, Int32) | Improve this Doc View Source GetBytes(Char[], Int32, Int32, Byte[], Int32) Gets the encoded bytes. Declaration public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex) Parameters Type Name Description Char [] chars Chars to convert. Int32 charIndex Index in the char array. Int32 charCount Number of chars to convert. Byte [] bytes Output byte array. Int32 byteIndex Indes in the byte array. Returns Type Description Int32 The encoded bytes. Overrides Encoding.GetBytes(Char[], Int32, Int32, Byte[], Int32) | Improve this Doc View Source GetCharCount(Byte[], Int32, Int32) Gets the char count. Declaration public override int GetCharCount(byte[] bytes, int index, int count) Parameters Type Name Description Byte [] bytes Bytes to convert. Int32 index Index of the byte array. Int32 count Count of the byte array. Returns Type Description Int32 The char count. Overrides Encoding.GetCharCount(Byte[], Int32, Int32) | Improve this Doc View Source GetChars(Byte[], Int32, Int32, Char[], Int32) Gets the decoded chars. Declaration public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) Parameters Type Name Description Byte [] bytes Encoded bytes. Int32 byteIndex Index in the encoded bytes. Int32 byteCount Number of bytes to decoded. Char [] chars Output char array. Int32 charIndex Index in the char array. Returns Type Description Int32 The decoded chars. Overrides Encoding.GetChars(Byte[], Int32, Int32, Char[], Int32) | Improve this Doc View Source GetMaxByteCount(Int32) Gets the max byte count. Declaration public override int GetMaxByteCount(int charCount) Parameters Type Name Description Int32 charCount Char count. Returns Type Description Int32 The max byte count. Overrides Encoding.GetMaxByteCount(Int32) | Improve this Doc View Source GetMaxCharCount(Int32) Gets the max char count. Declaration public override int GetMaxCharCount(int byteCount) Parameters Type Name Description Int32 byteCount Byte count. Returns Type Description Int32 The max char count. Overrides Encoding.GetMaxCharCount(Int32) Implements System.ICloneable"
  },
  "api/Yarhl.Media.Text.Encodings.html": {
    "href": "api/Yarhl.Media.Text.Encodings.html",
    "title": "Namespace Yarhl.Media.Text.Encodings | SceneGate Yarhl",
    "keywords": "Namespace Yarhl.Media.Text.Encodings Classes EscapeOutRangeEncoding Provides an encoding for encode and decode symbols out of range of any encoding. EucJpEncoding EUC-JP encoding. Implemented standard from: https://encoding.spec.whatwg.org/ ."
  },
  "api/Yarhl.Media.Text.html": {
    "href": "api/Yarhl.Media.Text.html",
    "title": "Namespace Yarhl.Media.Text | SceneGate Yarhl",
    "keywords": "Namespace Yarhl.Media.Text Classes Binary2Po Binary to Po converter. Po Portable Object format for translations. Po2Binary Po to Binary converter. PoEntry Entry in PO formats. Represents a translation unit. PoHeader Header for PO translation format. Replacer Replaces substrings in a text from a map. XmlExtension Extension methods for XML. Structs ReplacerEntry Entry of the map of replacements."
  },
  "api/Yarhl.Media.Text.Po.html": {
    "href": "api/Yarhl.Media.Text.Po.html",
    "title": "Class Po | SceneGate Yarhl",
    "keywords": "Class Po Portable Object format for translations. Inheritance Object Po Implements IFormat Namespace : Yarhl.Media.Text Assembly : Yarhl.Media.dll Syntax public class Po : IFormat Constructors | Improve this Doc View Source Po() Initializes a new instance of the Po class. Declaration public Po() | Improve this Doc View Source Po(PoHeader) Initializes a new instance of the Po class. Declaration public Po(PoHeader headerArg) Parameters Type Name Description PoHeader headerArg PO header. Properties | Improve this Doc View Source Entries Gets the entries. Declaration public ReadOnlyCollection<PoEntry> Entries { get; } Property Value Type Description ReadOnlyCollection < PoEntry > The entries. | Improve this Doc View Source Header Gets or sets the header. Declaration public PoHeader Header { get; set; } Property Value Type Description PoHeader The header. Methods | Improve this Doc View Source Add(IEnumerable<PoEntry>) Add the specified entries. Declaration public void Add(IEnumerable<PoEntry> items) Parameters Type Name Description IEnumerable < PoEntry > items Entries to add. | Improve this Doc View Source Add(PoEntry) Add the specified entry. Declaration public void Add(PoEntry item) Parameters Type Name Description PoEntry item Entry to add. The ID must be unique. | Improve this Doc View Source FindEntry(String, String) Gets a PoEntry from the original text. Declaration public PoEntry FindEntry(string original, string context = null) Parameters Type Name Description String original Original text from the entry. String context Context text from the entry. Returns Type Description PoEntry The found entry or null if not found. Implements IFormat"
  },
  "api/Yarhl.Media.Text.Po2Binary.html": {
    "href": "api/Yarhl.Media.Text.Po2Binary.html",
    "title": "Class Po2Binary | SceneGate Yarhl",
    "keywords": "Class Po2Binary Po to Binary converter. Inheritance Object Po2Binary Implements IConverter < Po , BinaryFormat > IConverter Namespace : Yarhl.Media.Text Assembly : Yarhl.Media.dll Syntax public class Po2Binary : IConverter<Po, BinaryFormat>, IConverter Methods | Improve this Doc View Source Convert(Po) Convert the specified PO into a Binary stream. Declaration public BinaryFormat Convert(Po source) Parameters Type Name Description Po source Source PO. Returns Type Description BinaryFormat The converted stream. Implements IConverter<TSrc, TDst> IConverter"
  },
  "api/Yarhl.Media.Text.PoEntry.html": {
    "href": "api/Yarhl.Media.Text.PoEntry.html",
    "title": "Class PoEntry | SceneGate Yarhl",
    "keywords": "Class PoEntry Entry in PO formats. Represents a translation unit. Inheritance Object PoEntry Namespace : Yarhl.Media.Text Assembly : Yarhl.Media.dll Syntax public class PoEntry Constructors | Improve this Doc View Source PoEntry() Initializes a new instance of the PoEntry class. Declaration public PoEntry() | Improve this Doc View Source PoEntry(String) Initializes a new instance of the PoEntry class. Declaration public PoEntry(string original) Parameters Type Name Description String original Original text to translate. Properties | Improve this Doc View Source Context Gets or sets the context. Declaration public string Context { get; set; } Property Value Type Description String The context. Remarks It's possible to have multiple entries with the same Original content if the context is different. | Improve this Doc View Source ExtractedComments Gets or sets the programmers' comments. Declaration public string ExtractedComments { get; set; } Property Value Type Description String The extracted comments. | Improve this Doc View Source Flags Gets or sets the flags. Declaration public string Flags { get; set; } Property Value Type Description String The flags. | Improve this Doc View Source Original Gets or sets the original content to translate. Declaration public string Original { get; set; } Property Value Type Description String The original content. Remarks Entris with the same original content will be merged. | Improve this Doc View Source PreviousContext Gets or sets the previous context. Declaration public string PreviousContext { get; set; } Property Value Type Description String The previous context. | Improve this Doc View Source PreviousOriginal Gets or sets the previous original content. Declaration public string PreviousOriginal { get; set; } Property Value Type Description String The previous original content. | Improve this Doc View Source Reference Gets or sets the comments with reference to the origin of the content. Declaration public string Reference { get; set; } Property Value Type Description String The reference. | Improve this Doc View Source Text Gets the translated text if any, otherwise the original text. Declaration public string Text { get; } Property Value Type Description String The final text. | Improve this Doc View Source Translated Gets or sets the translated content. Declaration public string Translated { get; set; } Property Value Type Description String The translated content. | Improve this Doc View Source TranslatorComment Gets or sets the translators' comments. Declaration public string TranslatorComment { get; set; } Property Value Type Description String The translator comment."
  },
  "api/Yarhl.Media.Text.PoHeader.html": {
    "href": "api/Yarhl.Media.Text.PoHeader.html",
    "title": "Class PoHeader | SceneGate Yarhl",
    "keywords": "Class PoHeader Header for PO translation format. Inheritance Object PoHeader Namespace : Yarhl.Media.Text Assembly : Yarhl.Media.dll Syntax public class PoHeader Constructors | Improve this Doc View Source PoHeader() Initializes a new instance of the PoHeader class. Declaration public PoHeader() | Improve this Doc View Source PoHeader(String, String, String) Initializes a new instance of the PoHeader class. Declaration public PoHeader(string id, string reporter, string lang) Parameters Type Name Description String id Identifier of the project. String reporter Address to report bugs. String lang Translation language. Properties | Improve this Doc View Source ContentTransferEncoding Gets the content transfer encoding. Declaration public static string ContentTransferEncoding { get; } Property Value Type Description String The content transfer encoding. | Improve this Doc View Source ContentType Gets the type of the content and encoding. Declaration public static string ContentType { get; } Property Value Type Description String The type of the content. | Improve this Doc View Source CreationDate Gets or sets the creation date. Declaration public string CreationDate { get; set; } Property Value Type Description String The creation date. | Improve this Doc View Source Extensions Gets a dictionary with custom header metadata. Declaration public IDictionary<string, string> Extensions { get; } Property Value Type Description IDictionary < String , String > The dictionary for the metadata. | Improve this Doc View Source Language Gets or sets the target language. Declaration public string Language { get; set; } Property Value Type Description String The target language. | Improve this Doc View Source LanguageTeam Gets or sets the team translation name. Declaration public string LanguageTeam { get; set; } Property Value Type Description String The team name. | Improve this Doc View Source LastTranslator Gets or sets the last translator name. Declaration public string LastTranslator { get; set; } Property Value Type Description String The last translator name. | Improve this Doc View Source MimeVersion Gets the version of MIME. Declaration public static string MimeVersion { get; } Property Value Type Description String The version of MIME. | Improve this Doc View Source PluralForms Gets or sets the plural forms. Declaration public string PluralForms { get; set; } Property Value Type Description String The plural forms. | Improve this Doc View Source ProjectIdVersion Gets or sets the project identifier version. Declaration public string ProjectIdVersion { get; set; } Property Value Type Description String The project identifier version. | Improve this Doc View Source ReportMsgidBugsTo Gets or sets the address and name to report bugs in the string format. Declaration public string ReportMsgidBugsTo { get; set; } Property Value Type Description String The address to report bugs to. | Improve this Doc View Source RevisionDate Gets or sets the revision date. Declaration public string RevisionDate { get; set; } Property Value Type Description String The revision date."
  },
  "api/Yarhl.Media.Text.Replacer.html": {
    "href": "api/Yarhl.Media.Text.Replacer.html",
    "title": "Class Replacer | SceneGate Yarhl",
    "keywords": "Class Replacer Replaces substrings in a text from a map. Inheritance Object Replacer Namespace : Yarhl.Media.Text Assembly : Yarhl.Media.dll Syntax public class Replacer Constructors | Improve this Doc View Source Replacer() Initializes a new instance of the Replacer class. Declaration public Replacer() Properties | Improve this Doc View Source Map Gets the map for the replacements. Declaration public ReadOnlyCollection<ReplacerEntry> Map { get; } Property Value Type Description ReadOnlyCollection < ReplacerEntry > The map for the replacements. Methods | Improve this Doc View Source Add(String, String) Add or replace an entry in the map. Declaration public void Add(string src, string dst) Parameters Type Name Description String src The source field for the entry. String dst The destination field for the entry. | Improve this Doc View Source Remove(String) Remove an entry from the map. Declaration public void Remove(string src) Parameters Type Name Description String src The original field from the entry. | Improve this Doc View Source TransformBackward(String) Transform a text with replacing chars from destination to source. Declaration public string TransformBackward(string text) Parameters Type Name Description String text The text to transform. Returns Type Description String The transformed text. Remarks When multiple original fields in the map have same start, the later map entry will have preference. | Improve this Doc View Source TransformForward(String) Transform a text replacing the chars from source to destination. Declaration public string TransformForward(string text) Parameters Type Name Description String text The text to transform. Returns Type Description String The transformed text. Remarks When multiple original fields in the map have same start, the later map entry will have preference."
  },
  "api/Yarhl.Media.Text.ReplacerEntry.html": {
    "href": "api/Yarhl.Media.Text.ReplacerEntry.html",
    "title": "Struct ReplacerEntry | SceneGate Yarhl",
    "keywords": "Struct ReplacerEntry Entry of the map of replacements. Implements IEquatable < ReplacerEntry > Inherited Members ValueType.ToString() Namespace : Yarhl.Media.Text Assembly : Yarhl.Media.dll Syntax public struct ReplacerEntry : IEquatable<ReplacerEntry> Constructors | Improve this Doc View Source ReplacerEntry(String, String) Initializes a new instance of the ReplacerEntry struct. Declaration public ReplacerEntry(string original, string modified) Parameters Type Name Description String original The original string to replace. String modified The modified string. Properties | Improve this Doc View Source Modified Gets the modified string. Declaration public string Modified { get; } Property Value Type Description String Modified string. | Improve this Doc View Source Original Gets the original string. Declaration public string Original { get; } Property Value Type Description String Original string. Methods | Improve this Doc View Source Equals(Object) Determines whether two object instances are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false. Overrides ValueType.Equals(Object) | Improve this Doc View Source Equals(ReplacerEntry) Determines whether two object instances are equal. Declaration public bool Equals(ReplacerEntry other) Parameters Type Name Description ReplacerEntry other The instance to compare with the current instance. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for the current object. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(ReplacerEntry, ReplacerEntry) Determines whether two object instances are equal. Declaration public static bool operator ==(ReplacerEntry entry1, ReplacerEntry entry2) Parameters Type Name Description ReplacerEntry entry1 First entry to compare. ReplacerEntry entry2 Second entry to compare. Returns Type Description Boolean true if the first object is equal to the second object; otherwise, false. | Improve this Doc View Source Inequality(ReplacerEntry, ReplacerEntry) Determines whether two object instances are different. Declaration public static bool operator !=(ReplacerEntry entry1, ReplacerEntry entry2) Parameters Type Name Description ReplacerEntry entry1 First entry to compare. ReplacerEntry entry2 Second entry to compare. Returns Type Description Boolean true if the first object is different to the second object; otherwise, false. Implements System.IEquatable<T>"
  },
  "api/Yarhl.Media.Text.XmlExtension.html": {
    "href": "api/Yarhl.Media.Text.XmlExtension.html",
    "title": "Class XmlExtension | SceneGate Yarhl",
    "keywords": "Class XmlExtension Extension methods for XML. Inheritance Object XmlExtension Namespace : Yarhl.Media.Text Assembly : Yarhl.Media.dll Syntax public static class XmlExtension Properties | Improve this Doc View Source EscapeSpace Gets the escape space. Declaration public static string EscapeSpace { get; } Property Value Type Description String The escape space. | Improve this Doc View Source XmlSpacesPerLevel Gets the default spaces per XML level. Declaration public static int XmlSpacesPerLevel { get; } Property Value Type Description Int32 The spaces per XML level. Methods | Improve this Doc View Source GetIndentedValue(XElement) Gets the concatenated text to this element removing any indentation. Declaration public static string GetIndentedValue(this XElement entry) Parameters Type Name Description XElement entry XML entry to get text. Returns Type Description String The value without indentation. | Improve this Doc View Source SetIndentedValue(XElement, String, Int32) Sets the concatenated text to this element indented for human-readibility. Declaration public static void SetIndentedValue(this XElement entry, string val, int indent) Parameters Type Name Description XElement entry XML entry to set text. String val Value to indent and set. Int32 indent Indentation level."
  },
  "api/Yarhl.PluginManager.html": {
    "href": "api/Yarhl.PluginManager.html",
    "title": "Class PluginManager | SceneGate Yarhl",
    "keywords": "Class PluginManager Plugin manager. Inheritance Object PluginManager Namespace : Yarhl Assembly : Yarhl.dll Syntax public sealed class PluginManager Remarks Plugin assemblies are loaded from the directory with the Yarhl assembly and the 'Plugins' subfolder with its children. Properties | Improve this Doc View Source Instance Gets the plugin manager instance. Declaration public static PluginManager Instance { get; } Property Value Type Description PluginManager Remarks It initializes the manager if needed. | Improve this Doc View Source PluginDirectory Gets the name of the plugins directory. Declaration public static string PluginDirectory { get; } Property Value Type Description String Methods | Improve this Doc View Source FindExtensions(Type) Finds all the extensions from the given base type. Declaration public IEnumerable<object> FindExtensions(Type extension) Parameters Type Name Description Type extension Type of the extension point. Returns Type Description IEnumerable < Object > The extensions. | Improve this Doc View Source FindExtensions<T>() Finds all the extensions from the given base type. Declaration public IEnumerable<T> FindExtensions<T>() Returns Type Description IEnumerable <T> The extensions. Type Parameters Name Description T Type of the extension point. | Improve this Doc View Source FindLazyExtensions(Type) Finds all the extensions from the given base type and returns a factory to initialize the type. Declaration public IEnumerable<object> FindLazyExtensions(Type extension) Parameters Type Name Description Type extension Type of the extension point. Returns Type Description IEnumerable < Object > The extension factory. | Improve this Doc View Source FindLazyExtensions<T>() Finds all the extensions from the given base type and return their lazy type for initialization. Declaration public IEnumerable<ExportFactory<T>> FindLazyExtensions<T>() Returns Type Description IEnumerable < ExportFactory <T>> The lazy extensions. Type Parameters Name Description T Type of the extension point. | Improve this Doc View Source FindLazyExtensions<T, TMetadata>() Finds all the extensions from the given base type and returns a factory to initialize the type and its associated metadata. Declaration public IEnumerable<ExportFactory<T, TMetadata>> FindLazyExtensions<T, TMetadata>() where TMetadata : IExportMetadata Returns Type Description IEnumerable < ExportFactory <T, TMetadata>> The extension factory. Type Parameters Name Description T Type of the extension point. TMetadata Type of the metadata. | Improve this Doc View Source GetConverters() Get a list of converter extensions. Declaration public IEnumerable<ExportFactory<IConverter, ConverterMetadata>> GetConverters() Returns Type Description IEnumerable < ExportFactory < IConverter , ConverterMetadata >> Enumerable of lazy converters with metadata. | Improve this Doc View Source GetFormats() Get a list of format extensions. Declaration public IEnumerable<ExportFactory<IFormat, FormatMetadata>> GetFormats() Returns Type Description IEnumerable < ExportFactory < IFormat , FormatMetadata >> Enumerable of lazy formats with metadata."
  },
  "CONTRIBUTING.html": {
    "href": "CONTRIBUTING.html",
    "title": "Contributing to Yarhl | SceneGate Yarhl",
    "keywords": "Contributing to Yarhl Thanks for taking the time to contribute! ✨ In this document you will find all the information you need to make sure that Yarhl continues to be the high-quality product we want to be! Reporting issues Issues When reporting a problem, be as specific as possible. Ideally, you should provide an small snippet of code that reproduces the issue. Try to provide also the following information: OS: Linux / Windows / Mac OS Runtime: .NET Framework, Mono, .NET Core, .NET 5 Version of Yarhl Stacktrace if any What's happening and what you expect to happen Features If you want to ask for a new feature, first make sure it hasn't been reported yet by using the search box in the issue tab. Make sure that the feature aligns with the direction of the project. Do not ask for tools for games or translations . This is an abstract library for all kind of converter programs. Pull Request Before starting a pull request, create an issue requesting the feature you would like to see and implement. If you are fixing a bug, create also an issue to be able to track the problem. State that you would like to work on that. The team will reply to the issue as soon as possible, discussing the proposal if needed. This guarantee that later on the Pull Request we don't reject the proposal without having a discussion first and we don't waste time. In general, the process to create a pull request is: Create an issue describing the bug or feature and state you would like to work on that. The team will cheer you and/or discuss with you the issue. Fork the project. Clone your forked project and create a git branch. Make the necessary code changes in as many commits as you want. The commit message should follow this convention: :emoji: Short description #IssueID Long description if needed. Create a pull request. After reviewing your changes and making any new commits if needed, the team will approve and merge it. For a complete list of emoji description see this repository . Code Guidelines We follow the following standard guidelines with custom changes: Mono Code Guidelines . Microsoft Framework Design Guidelines Microsoft C# Coding Convetions . As the mono team says : It is more important to be correct than to be fast. It is more important to be maintainable than to be fast. Fast code that is difficult to maintain is likely going to be looked down upon. And don't miss The Zen of Python : Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those! Quality We focus on code-quality to make ours and others life easier. For that reason: ✔️ DO write documentation for any public type and field. ✔️ DO write a test for all the possible code branches of your methods. Use a TDD approach. ✔️ DO seek for 100% test coverage. ✔️ DO seek for compiler warning free code. ✔️ DO check the code with StyleCop for style issues. ✔️ DO check the code with Gendarme for design issues. ✔️ DO review the results of SonarQube in the Pull Request. ✔️ DO make sure the CI pass. Style Guidelines Indentation ✔️ DO use spaces with an indentation level of 4 spaces. ❌ DO NOT use tabs. New lines ✔️ DO use Unix new lines: \\n instead of Windows style \\r\\n . In general, Git will handle that for you. ✔️ DO make sure there is an empty line at the end of the file. This ensure the latest line ends with the new line character and adding new lines after it won't show that line as changed in the diff. Line length ✔️ DO use a limit of 80 columns. If you need to wrap, move to the next line with one extra indentation level. ✔️ DO put all the arguments in a new line if they don't fit. ✔️ DO use local variables to make small conditions. void Method( int a, string b, int c) { OtherMethod( a, b, c); bool z = (a > 3) && (a < 5); bool w = b.StartsWith(\"hello\"); if (z && w) { Code(); } } Layout ✔️ DO define a type (class / struct / enum) per file. ✔️ DO separate methods and properties with new lines. ✔️ DO place the elements in this order: private fields, constructors, properties, methods, nested types. Place first static fields and order by visibility: public, protected, private. Spacing rules ❌ DO NOT leave any trailing spaces. ❌ DO NOT use space before opening parenthesis calling methods or indexers, between the parenthesis and the arguments or between the generic types. Method ( a ); array [ 10 ]; var list = new List <int> (); ✔️ DO use the following convention: Method(a); array[10]; var list = new List<int>(); ✔️ DO use spaces and parenthesis for clarity in math operations: int b = (a + (5 * 2)) / (3 + 3); ✔️ DO indent case statements: switch (a) { case 3: c = \"hello\"; break; case 5: c = \"world\"; break; default: throw new Exception(); } Brace position ✔️ DO put the opening brace on the same line for conditions, loops and try-catch. if (a) { Code(); Code(); } else if (b) { Code(); } else { Code(); } try { Something(); } catch (ArgumentNullException ex) { Something(); } finally { Something(); } for (int i = 0; i < 2; i++) { Something(); } ✔️ DO use braces for one line conditions and loops. This improves readability and avoid having changed lines just to add the brace when it requires extra logic. The exception is for one line conditions for argument checking. if (a) { Code(); } ✔️ DO put the brace in a new line when defining the namespace, a type or a method. namespace Program.Text { public class Abc { public void MyMethod() { } } } ✔️ DO put the brace in the same line for properties and indexers. public int Property { get { return value; } } ✔️ DO put each brace on a new line for empty methods. void EmptyMethod() { } Multiline comments ✔️ DO use always double slash comments. // Blah // Blah again // and another Blah Properties ❌ DO NOT use public variables under any circumstance. ✔️ DO use static properties for constants. ✔️ DO put the getter and setter in a new line for automatic or one line properties. public int Property { get { return value; } set { x = value; } } public int Text { get; private set; } File headers ✔️ DO put the license in the file header with this format: // // <FileName>.cs // // Author: // <AuthorName> <email@example.com> // // Copyright (c) <Year> <AuthorName> // // Permission is hereby granted, free of charge, to any person obtaining a copy // of this software and associated documentation files (the \"Software\"), to deal // in the Software without restriction, including without limitation the rights // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell // copies of the Software, and to permit persons to whom the Software is // furnished to do so, subject to the following conditions: // // The above copyright notice and this permission notice shall be included in // all copies or substantial portions of the Software. // // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN // THE SOFTWARE. Naming ✔️ DO use always camel casing. void Method(string myArgument) class MyClass { string myString; int veryImportantValue; } ❌ DO NOT use m_ or _ as prefixes for private instance members. The private visibility was created for that, really. Keyword this ❌ DO NOT use this if it's not needed. ✔️ DO use this if the method has an argument with the same name. class Foo { int bar; public Foo(int bar) { this.bar = bar; } void Update(int newValue) { bar = newValue; Method(); } public void Method() { } } Keyword var ✔️ DO use the var on the left-hand side of an assignment when the type name is repeated on the right hand side: var monkeyUUID = new NSUuid(uuid); NSUuid something = RetrieveUUID(); Initializing instances ✔️ DO use the C# syntax to initialize instances. var x = new Foo { Label = \"This\", Color = Color.Red }; string[] array = { \"a\", \"b\", \"c\" }; var array2 = new string[] { \"d\", \"e\", \"f\" }; var list = new List<string> { \"hello\", \"world\" }; var dict = new Dictionary<string, int> { { \"hello\": 0 }, { \"world\": 1 } }; Redundant visibility ❌ DO NOT use the private keyword to indicate internal fields since it's already the default visibility. Usings ✔️ DO put the using inside the namespace. ✔️ DO include all the namespaces you are using. ✔️ DO use the using statement for IDisposable types. Built-in types ✔️ DO use the built-in type alias instead of the class names. int a = 5; long b = 5; string c = \"hello\"; string d = int.Parse(\"5\"); Integers ✔️ DO try to avoid unsigned integers in public method arguments and properties. Some .NET language doesn't support them. Strings ✔️ DO use the new string interpolation: int a = 5; string b = $\"The result is {a}\"; ✔️ DO use the StringBuilder class when creating strings with many operations."
  },
  "dev/Changelog.html": {
    "href": "dev/Changelog.html",
    "title": "vNext (December 23, 2020) | SceneGate Yarhl",
    "keywords": "vNext (December 23, 2020) As part of this release we had 8 issues closed. Improvement in the namespace Yarhl.IO with support of Stream! Breaking changes The property Stream of DataReader , DataWriter , TextReader and TextWriter now returns Stream instead of DataStream . This due to the fact that these classes now works entirely with Stream . In order to use DataStream specific features like the property EndOfStream or methods like WriteTo , you could keep a reference to your original DataReader . If you know the reader/writer is working with a DataStream you could cast it. Access to EndOfStream property from a reader could be replaced with reader.Stream.Position >= reader.Stream.Length . DataStream does NOT throw EndOfStreamException when reading bytes. This change is required to match the expected behavior of Stream . ReadByte returns -1 when it reaches the end. ReadBytes reads as many bytes as possible given in the count argument. It will read nothing when it reaches the end. It returns how many bytes it has read (0 in end of stream). DataReader keeps the behavior and it WILL throw EndOfStreamException when reading any data type , including ReadByte and ReadBytes . DataStream.ReadByte now returns int instead of byte . This is required to overload Stream function. It returns always byte values except when reaches the end that it returns -1. Rename TextReader and TextWriter to TextDataReader and TextDataWriter . This avoids name conflict with System.IO classes. IStream now requires to implement the Flush method. DataStream.Flush will call it. Move DataStream.Length setter to its own method SetLength(long) . This is a required changed by Stream . Obsolete SeekMode and any method having this type as argument. Instead use the BCL type System.IO.SeekOrigin . DataReader and DataWriter now throw NotSupportedException when using an invalid endianness. Before it returned -1 or write in big endianness mode. Breakings #162 Rename TextReader and TextWriter to TextDataReader and TextDataWriter #161 Implement DataStream inheritance with Stream and support of Readers and Writers with Stream Enhancements #166 Advanced filter in FromDirectory #165 Set FileOpenMode at NodeFactory.FromFile #164 Can't read a file with readonly attribute #163 Stream overloads in BinaryFormat and NodeFactory and fix threading issue #160 Disable auto-comment on release #158 Support System.IO.Stream in Yarhl.IO classes v3.1.0 (December 23, 2020) As part of this release we had 21 issues closed. Several features and bug improvements in IO like the new cool binary (de)serializer. Use the new build system from PleOps.Cake. Deprecate .NET Framework 4.6.1. Special thanks to @Kaplas80, @Megaflan, @Darkmet98 and @pleonex. Bugs #147 DataStream.WriteTo does not create the file when the length is zero #146 Remove double slashes in path #141 Fix multi-line support in ExtractedComment of PO files #140 Extracted comments with multi lines is splitted by space instead of new line on Binary2Po #139 NodeFactory fails to create node tree when the path contains double slashes #136 DataStream.WriteTo does not create the file when the length is zero #135 DataStreamFactory does not check if the file exists when opening for reading Enhancements #155 Migrate build system to PleOps.Cake and deprecate .NET Framework 4.6.1 #154 Support .NET 5.0 #153 Support .NET 5 #152 Support Int24 type in binary (de)serializer #151 Implement binary (de)serializer from objects #149 Custom string terminators #148 Solved DataStreamFactory does not check if the file exists when openi… #145 Support float and double types in ReadByType and WriteOfType #144 Implement Stream.WriteTo with custom offset #123 Improve build and release process #73 Implement Stream.WriteTo with custom offset v3.0 (July 26, 2020) This release focuses in API user-experience enhancements . The transform and format API methods and base classes are now easier to understand and use. New convenience methods introduced and factories. Extensibilities in the IO namespace to support advance use cases as we have more applications using Yarhl. Special thanks to all the contributors: @Kaplas80, @pleonex and @priverop and to all our users providing great feedback. Especially the guys from TraduSquare. Features New API to pass parameters to converters: IInitializer<T> (#93 by @pleonex) New API DataStreamFactory to create DataStream (#111 by @pleonex) New API to keep ownership of underlying streams (#118 by @pleonex) New API to create nodes from a part of a stream: NodeFactory.FromSubstream (673ad2d by @pleonex) New API to create DataStream from a byte array (9158dea by @pleonex) Thread-safe DataStream for sharing an IStream (#129 by @Kaplas80) Add extensibility to streams with new interface IStream (#109 by @pleonex) Lazy open files to avoid hitting maximum file handlers opening a folder (#111 by @pleonex) Improve memory and performance by using RecyclableMemoryStream for memory DataStream (#111 by @pleonex) New interface IBinary to mark binary types (other than BinaryFormat ) (0450b98 by @pleonex) Improve performance of DataStream.Compare (#110 by @pleonex) New API DataReader.ReadStringToToken() (#137 by @pleonex) New constructor in TextReader and TextWriter with the encoding name (#114 by @pleonex) Auto-register additional encodings of .NET Core (#114 by @pleonex) New API to sort children (#131 by @Kaplas80) New node tags FileInfo and DirectoryInfo in nodes from the NodeFactory (#128 by @Kaplas80) Optional dispose of nodes when removing children (#130 by @Kaplas80) Enhancements to NodeFileContainer.MoveChildrenTo for merging nodes instead of replacing (#130 by @Kaplas80) Support relative path searches (#99 by @pleonex) New API to remove nodes (#100 by @pleonex) Prevent adding as a child a parent node (#115 #133 by @pleonex and @Kaplas80) New cookbook with small code snippets (#108 by @priverop) New CII Best Practices badge (6e06654 by @pleonex) Breaking changes Change license from GPL v3 to MIT which is more permissive (#121 by @pleonex) Split PO converters. Binary format into PO is a new converter: Binary2Po (#120 by @pleonex) Change Node.Transform methods into Node.TransformTo and Node.TransformWith (#93 by @pleonex) Move static converter methods from Format to new static class ConvertFormat (#92 by @pleonex) Convert Format into an empty interface IFormat (#92 by @pleonex) Node.Format property is now getter-only. New method added Node.ChangeFormat (#92 by @pleonex) Move DataStream and BinaryFormat constructors to DataStreamFactory (#111 by @pleonex) BinaryFormat does not create its own DataStream , it will dispose the stream passed in the constructor (#111 by @pleonex) Move BinaryFormat class to the Yarhl.IO namespace (0450b98 by @pleonex) Rename DataReader.ReadPadding to SkipPadding (#109 by @pleonex) Prevent changing length of a substream (#97 by @pleonex) Rename Replacer.Transform into TransformForward and TransformBackward (#101 by @pleonex) Bugs Fix decoding issues in DataReader.ReadString (#137 by @pleonex) Fix writing large files (> 2GB) (#113 by @pleonex) Missing extensions defined by an executable (eed98a7 by @pleonex) Skip assemblies throwing BadImageFormatException (#125 by @Kaplas80) Changing substream length may be overwriting other stream sections (#97 by @pleonex) Fix converting from base types (#102 by @pleonex) Check if the return type after transforming implements IFormat (#103 by @pleonex) Do not dispose when changing to the same format instance (#119 by @pleonex) Documentation link and version improvements (#106 and #107 by @priverop) Other changes Build and ship for .NET Framework 4.6.1 (TFM net461 ) for applications running in .NET Framework below 4.7.2 (d1588b9 by @pleonex) Run tests in latest frameworks: .NET Core 3.1, .NET Framework 4.8 and Mono 6 (#116 #137 by @pleonex) Consolidate CI in Azure DevOps and create test feed (#94 by @pleonex) Improvements in build system and project handling (#117 by @pleonex) Move SonarQube to SonarLint to get feedback while coding (#117 by @pleonex) Warnings cleanup (team work accross PR like #98 and #122) Change default branch to develop (b0ca82e by @pleonex) v2.0 (January 30, 2019) New plugin discovery system and build system. Special thanks to @priverop for the support, fixes and doc! Infrastructure New plugin discovery system with MEF 2 to replace Mono.Addin. New build system with Cake. Used to build, test, validate and deploy code and documentation. It works in all OS and it's used by the CI too. Add on-line API documentation and overview Add contribution guidelines Deploy packages to NuGet Load plugin DLL from directory Plugins Target .NET Standard 2.0 for the project --> Tested in Mono, .NET Framework and .NET Core Fix warnings Features and bug fixes Support BOM / Preamble in TextReader and TextWriter (#70) Support multilines in Po entry comments (#80) v1.0 (August 29, 2018) First release with the new name Yahrl . This is a rewrite of the old libgame library. It changes the way to work with Files ( Node instead of GameFile ), Format and conversions. It implements a new method of conversions, implementing new classes from IConverter<,> instead of implementing hard-coded methods in the Format class. It also provides with converters for Po files and better ways to handle Streams and read / write binary and text files. This release has been tested in many small programs to edit text, script and image files in game fan-translations. v0.4 (June 18, 2016) First Stable Release It features a full library ready to work with ROM Hacking project. This version has been used in modime for the Ninokuni NDS Spanish Translation ."
  },
  "guides/Contributing.html": {
    "href": "guides/Contributing.html",
    "title": "Contributing to Yarhl | SceneGate Yarhl",
    "keywords": "Contributing to Yarhl Thanks for taking the time to contribute! ✨ In this document you will find all the information you need to make sure that Yarhl continues to be the high-quality product we want to be! Reporting issues Issues When reporting a problem, be as specific as possible. Ideally, you should provide an small snippet of code that reproduces the issue. Try to provide also the following information: OS: Linux / Windows / Mac OS Runtime: .NET Framework, Mono, .NET Core, .NET 5 Version of Yarhl Stacktrace if any What's happening and what you expect to happen Features If you want to ask for a new feature, first make sure it hasn't been reported yet by using the search box in the issue tab. Make sure that the feature aligns with the direction of the project. Do not ask for tools for games or translations . This is an abstract library for all kind of converter programs. Pull Request Before starting a pull request, create an issue requesting the feature you would like to see and implement. If you are fixing a bug, create also an issue to be able to track the problem. State that you would like to work on that. The team will reply to the issue as soon as possible, discussing the proposal if needed. This guarantee that later on the Pull Request we don't reject the proposal without having a discussion first and we don't waste time. In general, the process to create a pull request is: Create an issue describing the bug or feature and state you would like to work on that. The team will cheer you and/or discuss with you the issue. Fork the project. Clone your forked project and create a git branch. Make the necessary code changes in as many commits as you want. The commit message should follow this convention: :emoji: Short description #IssueID Long description if needed. Create a pull request. After reviewing your changes and making any new commits if needed, the team will approve and merge it. For a complete list of emoji description see this repository . Code Guidelines We follow the following standard guidelines with custom changes: Mono Code Guidelines . Microsoft Framework Design Guidelines Microsoft C# Coding Convetions . As the mono team says : It is more important to be correct than to be fast. It is more important to be maintainable than to be fast. Fast code that is difficult to maintain is likely going to be looked down upon. And don't miss The Zen of Python : Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those! Quality We focus on code-quality to make ours and others life easier. For that reason: ✔️ DO write documentation for any public type and field. ✔️ DO write a test for all the possible code branches of your methods. Use a TDD approach. ✔️ DO seek for 100% test coverage. ✔️ DO seek for compiler warning free code. ✔️ DO check the code with StyleCop for style issues. ✔️ DO check the code with Gendarme for design issues. ✔️ DO review the results of SonarQube in the Pull Request. ✔️ DO make sure the CI pass. Style Guidelines Indentation ✔️ DO use spaces with an indentation level of 4 spaces. ❌ DO NOT use tabs. New lines ✔️ DO use Unix new lines: \\n instead of Windows style \\r\\n . In general, Git will handle that for you. ✔️ DO make sure there is an empty line at the end of the file. This ensure the latest line ends with the new line character and adding new lines after it won't show that line as changed in the diff. Line length ✔️ DO use a limit of 80 columns. If you need to wrap, move to the next line with one extra indentation level. ✔️ DO put all the arguments in a new line if they don't fit. ✔️ DO use local variables to make small conditions. void Method( int a, string b, int c) { OtherMethod( a, b, c); bool z = (a > 3) && (a < 5); bool w = b.StartsWith(\"hello\"); if (z && w) { Code(); } } Layout ✔️ DO define a type (class / struct / enum) per file. ✔️ DO separate methods and properties with new lines. ✔️ DO place the elements in this order: private fields, constructors, properties, methods, nested types. Place first static fields and order by visibility: public, protected, private. Spacing rules ❌ DO NOT leave any trailing spaces. ❌ DO NOT use space before opening parenthesis calling methods or indexers, between the parenthesis and the arguments or between the generic types. Method ( a ); array [ 10 ]; var list = new List <int> (); ✔️ DO use the following convention: Method(a); array[10]; var list = new List<int>(); ✔️ DO use spaces and parenthesis for clarity in math operations: int b = (a + (5 * 2)) / (3 + 3); ✔️ DO indent case statements: switch (a) { case 3: c = \"hello\"; break; case 5: c = \"world\"; break; default: throw new Exception(); } Brace position ✔️ DO put the opening brace on the same line for conditions, loops and try-catch. if (a) { Code(); Code(); } else if (b) { Code(); } else { Code(); } try { Something(); } catch (ArgumentNullException ex) { Something(); } finally { Something(); } for (int i = 0; i < 2; i++) { Something(); } ✔️ DO use braces for one line conditions and loops. This improves readability and avoid having changed lines just to add the brace when it requires extra logic. The exception is for one line conditions for argument checking. if (a) { Code(); } ✔️ DO put the brace in a new line when defining the namespace, a type or a method. namespace Program.Text { public class Abc { public void MyMethod() { } } } ✔️ DO put the brace in the same line for properties and indexers. public int Property { get { return value; } } ✔️ DO put each brace on a new line for empty methods. void EmptyMethod() { } Multiline comments ✔️ DO use always double slash comments. // Blah // Blah again // and another Blah Properties ❌ DO NOT use public variables under any circumstance. ✔️ DO use static properties for constants. ✔️ DO put the getter and setter in a new line for automatic or one line properties. public int Property { get { return value; } set { x = value; } } public int Text { get; private set; } File headers ✔️ DO put the license in the file header with this format: // // <FileName>.cs // // Author: // <AuthorName> <email@example.com> // // Copyright (c) <Year> <AuthorName> // // Permission is hereby granted, free of charge, to any person obtaining a copy // of this software and associated documentation files (the \"Software\"), to deal // in the Software without restriction, including without limitation the rights // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell // copies of the Software, and to permit persons to whom the Software is // furnished to do so, subject to the following conditions: // // The above copyright notice and this permission notice shall be included in // all copies or substantial portions of the Software. // // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN // THE SOFTWARE. Naming ✔️ DO use always camel casing. void Method(string myArgument) class MyClass { string myString; int veryImportantValue; } ❌ DO NOT use m_ or _ as prefixes for private instance members. The private visibility was created for that, really. Keyword this ❌ DO NOT use this if it's not needed. ✔️ DO use this if the method has an argument with the same name. class Foo { int bar; public Foo(int bar) { this.bar = bar; } void Update(int newValue) { bar = newValue; Method(); } public void Method() { } } Keyword var ✔️ DO use the var on the left-hand side of an assignment when the type name is repeated on the right hand side: var monkeyUUID = new NSUuid(uuid); NSUuid something = RetrieveUUID(); Initializing instances ✔️ DO use the C# syntax to initialize instances. var x = new Foo { Label = \"This\", Color = Color.Red }; string[] array = { \"a\", \"b\", \"c\" }; var array2 = new string[] { \"d\", \"e\", \"f\" }; var list = new List<string> { \"hello\", \"world\" }; var dict = new Dictionary<string, int> { { \"hello\": 0 }, { \"world\": 1 } }; Redundant visibility ❌ DO NOT use the private keyword to indicate internal fields since it's already the default visibility. Usings ✔️ DO put the using inside the namespace. ✔️ DO include all the namespaces you are using. ✔️ DO use the using statement for IDisposable types. Built-in types ✔️ DO use the built-in type alias instead of the class names. int a = 5; long b = 5; string c = \"hello\"; string d = int.Parse(\"5\"); Integers ✔️ DO try to avoid unsigned integers in public method arguments and properties. Some .NET language doesn't support them. Strings ✔️ DO use the new string interpolation: int a = 5; string b = $\"The result is {a}\"; ✔️ DO use the StringBuilder class when creating strings with many operations."
  },
  "guides/Cookbook.html": {
    "href": "guides/Cookbook.html",
    "title": "Cookbook | SceneGate Yarhl",
    "keywords": "Cookbook IO Padding // Add 0s until position is divisible by 0x4 filesWriter.WritePadding(0x00, 0x4); // Add 0s until position is divisible by 0x10 myDataWriter.WritePadding(0x00, 0x10); FileSystem Using converters with parameters public class ConverterWithParameter : IInitializer<int>, IConverter<BinaryFormat, Po>, IConverter<Po, BinaryFormat> { public int Parameter { get; set; } public void Initialize(int param) { Parameter = param; } public Po Convert(BinaryFormat source) { // Converter } public BinaryFormat Convert(Po source) { // Converter } } Then you can use TransformWith<ConverterWithParameter, int>(3) . You can use a custom class too: public class ConverterWithParameter : IInitializer<MyClass>, IConverter<BinaryFormat, Po>, IConverter<Po, BinaryFormat> TransformWith<ConverterWithParameter, MyClass>(myClassInstance) Creating directory structure Node root = new Node(\"root\"); string path = \"/parent1/parent2/\"; Node child = new Node(\"child\"); // This will create /root/parent1/parent2/child NodeFactory.CreateContainersForChild(root, path, child); Iterating children nodes foreach (Node node in Navigator.IterateNodes(source.Root)) { if (!node.IsContainer) { //This is your child, take care of him } } Find a node // You can use full paths (starting with '/') or relative paths. Navigator.SearchNode(nodeParent, \"Child/SubChild\"); ### Deleting nodes var parent = new Node(\"Parent\"); var child1 = new Node(\"Child1\"); var child2 = new Node(\"Child2\"); node.Add(child1); node.Add(child2); // If you remove passing a reference, the node is removed but it is NOT disposed node.Remove(child1); // If you remove passing a name (you don't have the reference), // the node is removed AND disposed. node.Remove(\"Child2\");"
  },
  "guides/Yarhl-nutshell.html": {
    "href": "guides/Yarhl-nutshell.html",
    "title": "Yarhl in a nutshell | SceneGate Yarhl",
    "keywords": "Yarhl in a nutshell Yarhl - Yet Another ROM Hacking Library - is a library for ROM Hacking and fan-translation projects. It provides a virtual file system, file format, and format conversion features and plugin support. But what it really has to offer? Why should you use it? And how? This tutorial will teach you how to use Yarhl and how to take advantage of the 100% of it. Remember that if you have any question you can create GitHub issues, contact the contributors by email, Twitter or Discord. But first make sure you've read the whole docs. Your first steps: Reading and Writing Oh, hi! I'm Mister Yarhl (or M.Y.). Nice to meet you. I will be your guide! Erm... y-you can... picture me like this: Let's get started! The first module I'm teaching you is Yarhl.IO (IO stands for Input/Output ), which is similar to .NET standard System.IO but with specific features to work with binary files. This module is divided into binary and text files. Easy-peasy! Let's go deeper into these classes! DataStream DataStream wraps any kind of .NET Stream . Reuse of Stream It allows to reuse a parent Stream to have substreams to reduce the number of resources to use. For instance, to unpack a file you would just need to create DataStream instances from the same parent DataStream having different offsets and lengths. Disposing the last instance of a DataStream that has a reference to a Stream will dispose the Stream too. Comparison The DataStream class provides the Compare method to check if two streams are identical. Push and pop positions Similar to the terminal commands pushd and popd , our DataStream provides methods for moving temporarily to a position to perform an operation and then restore the position. This is very useful when you need to read or write a few fields in another section of the file. It works with an stack so you can push several positions. PushCurrentPosition : save the current position. PushToPosition : save the current position and move. PopPosition : restore the last saved position. RunInPosition : push, run the lambda expression and pop again. Read and Write We have also the typical read and write methods for arrays of bytes. And don't forget about the WriteTo methods that allows to write a full DataStream in another DataStream or in a file in your disk. Very useful mate! DataReader and DataWriter DataReader is the equivalent of the .NET BinaryReader and DataWriter of `BinaryWriter. Apart from the typical read and write methods, they provide the following very useful features. Endianness By properties or constructor you can specify if the endianness of the stream is little or big. This will affect to all the read and write operations. Strings By using the different overloads of ReadString and Write you can read and write strings with different encodings, fixed sizes, null terminated or not or in the format size + content style. I recommend you to take a look into them, they cover most of the cases you will need to work with files. Padding Are you tired of writing logic to skip or write padding bytes? Well, we too! If you are reading a file and you want to skip padding bytes, you can call SkipPadding and if you need to write padding bytes, then WritePadding will be your friend. TextDataReader and TextDataWriter So far, DataReader and DataWriter have been very useful when you are dealing with a file that contains some integer fields for size or offset, arrays of bytes and maybe null-terminated strings. But, what about if you need to work with a file that only contains text and you are interested in reading line by line? In that case, you need TextDataReader and TextDataWriter . New lines By default, TextDataWriter uses always (Windows too) the new line \\n . It doesn't use \\r\\n . The reason is that most file formats uses \\n and in some games having the \\r may crash. It's sometimes difficult to notice that. If you want to use any other new line string (you can even use <br/> ), you just need to change the NewLine property. In the case of the TextDataReader the behavior is different. The default value for the NewLine property depends on the OS (Windows: \\r\\n , Unix: \\n ). In addition, we provided with an automatic mechanism enabled by default: AutoNewLine . If it's enabled, you don't need to know the line ending in advance because we will stop at \\n and remove the last \\r if present. This is also useful if a file mix both line endings. And remember, by setting the NewLine property AutoNewLine is disabled. Encoding The encoding can only by specified in the constructor. We believe that it doesn't have sense to change the encoding once you start using the reader because a text file must not mix encodings. Peeking Do you need to read a line without actually moving the position of the stream? Maybe you want to check if the line contains a token but you are not sure and don't want to keep the current position all the time. Well, in that case you have the Peek* methods. Preambles / BOM Some encodings may have a specific BOM ( Byte Order Mark ) (or preamble in the .NET world). These are some bytes at the beginning of the stream that confirms the encoding of the file. For instance, when using UTF-16, the file will begin with the bytes 0xFEFF . It also specifies if the encoding is little-ending or big-endian (needed for UTF-16). Our TextDataReader will skip the BOM ( if it's present ) at the beginning of the file. In the case of the TextDataWriter , the behavior is defined by the property AutoPreamble which is set to false by default (again, some games may see it as unexpected bytes). When enabled, the first write call will also write the BOM. You can also write it manually by calling WritePreamble() (but remember, only if you are at the beginning of the stream). I know... I talk too much... Let's continue! Examples Reading / writing a binary file public void LoadFile(string path) { using (var stream = DataStreamFactory.FromFile(path, FileOpenMode.Read)) { var reader = new DataReader(stream) { DefaultEncoding = new EscapeOutRangeEncoding(\"ascii\"), Endianness = EndiannessMode.BigEndian, }; string id = reader.ReadString(4); int offset = reader.ReadInt32(); reader.SkipPadding(32); double myDouble = reader.ReadDouble(); string name; stream.RunInPosition( () => name = reader.ReadString(), offset); } } public void SaveFile(string path) { using (var stream = DataStreamFactory.FromFile(path, FileOpenMode.Read)) { var writer = new DataWriter(stream); writer.Write(\"TEX0\", false); writer.Write(0xCAFE); writer.Write(0x00); writer.WritePadding(0xFF, 32); writer.Write(\"My long text of 80 bytes\", 80); stream.PushToPosition(0x08); writer.Write(0x65402); stream.PopPosition(); } } Reading / writing a text file public void LoadFile(DataStream stream) { var reader = new TextDataReader(stream, Encoding.Unicode); string firstLine = reader.ReadLine(); char[] someChars = reader.Read(4); string beforeToken = reader.ReadToToken(\"#\"); if (reader.Peek() == ':') reader.ReadLine(); string restFile = reader.ReadToEnd(); } public void SaveFile(DataStream stream) { var writer = new TextDataWriter(stream) { AutoPreamble = true, }; writer.WriteLine(\"Hello world!\"); writer.WriteLine(\"Count is {0}\", 42); writer.Write(\"No new line\"); } Implementing file formats Every game contains many files, which have a specific formats. For example files with extension .nclr are a palettes, or .aar are a package files. Yarhl helps you to code type as you were actually coding a game format. To implement a file format, you just need to create a new class that implements the (empty) IFormat interface. In this class you just need to add the fields of your format. In more programming terms, your format it's just a data model. Let's go for a quick example! Take a look into the following bytes from a file that seems to have text from a game menu: This file seems to follow the following specification in little endian: Size Name 4 Magic ID 2 Number of sentences 2 Size of the file * Null-terminated sentences So given this format, we would implement the following class that maps the specification: public class MenuSentences : IFormat { public MenuSentences() { Sentences = new Collection<string>(); } public uint MagicID { get; set; } public ushort FileSize { get; set; } public Collection<string> Sentences { get; private set; } } Easy! Don't worry about how to convert that format, we will talk about that later. BinaryFormat BinaryFormat is the most basic format since it just represents raw bytes, a stream. It's... a binary format . This format is assigned automatically when we open a file from Yarhl as we will see later. Its only property Stream allows you to access to its inner stream. NodeContainerFormat You may wonder... what about package formats like .zip ? They are represented with the format (or by inheriting it) NodeContainerFormat . This format contains a root folder, also known as Node . So let's see what a Node is. Entering the virtual world: Nodes This is the main feature of Yarhl and the most important one, no doubt, 10/10 Yarhl users would say so 1 . Yarhl has a virtual file system to handle your files while maintaining your computer intact, you can now delete your \"tests\" folder and clean your desktop after-ages. 1 None of Yarhl users wants to talk with me anymore. This may not be 100% accurate. Nodes A Node is a virtual file. It's like having a file system with files and folder but only in memory for the duration of your program. You can dynamically add and remove files / folders. These files and folders are called nodes in Yarhl. A node may have child nodes like a folder may have folders and files. You can add the subnodes with the Add method and you iterate and access to its children with the Children property. The node Name must be unique. You can also get the full path to the node in this new virtual filesystem. That is, if you have a root node with name MyRoot and you add a node Node1 , the Path property for Node1 will be /MyRoot/Node1 . Ah, one more thing before I forget. Regular files in your disk have some bytes associated, right? Well, in the case of nodes they have a Format that we were talking before. That is, it doesn't have to have bytes but it could be a type to represent image, texture, text, font, ... The actual type of the node. For instance, let's say we create a node from a disk file, it will have a BinaryFormat because for now it's just a bunch of bytes. But if those bytes store a set of menu texts, we could transform its format and associate its actual content type: MenuSentences . To the node Format property you can set any type that implements the IFormat interface. By the way, there is a property to get the inner DataStream when the format of the node is a BinaryFormat : Stream . It will return null if the type is not BinaryFormat . We added it because to do cool things like: node.Stream.WriteTo(\"/home/mister_yarhl/my_node.bin\"); If the type is different, you may want to check the method GetFormatAs<T>() . Why nodes? Well, imagine that you have a Nintendo DS game .nds , you could open it with Yarhl and access to its files and folders without actually extracting the files in your disk. All access would be in memory, probably even sharing the same stream thanks to the sub-DataStreams . Files vs folders As said, folders in our virtual file system are also nodes. They always have the NodeContainerFormat or any class that inherits it. This format is just a root node folder that becomes the children of the node. You can use the property IsContainer to check if the node is a node container, that is, if it's a folder. It's more clear with a picture: mastering would be our root node with format NodeContainerFormat . While example.example and example2.example would be our two child nodes. By default they will have a BinaryFormat format. Navigating the sea of nodes Do you have many nodes? I guess it will be difficult to navigate through all of them. Then, you want to review the class Navigator . It provides with features like iterators and finders. To iterate over the node children you would just do: foreach (var node in root.Children) { // Something } But if you want to iterate over the full tree of nodes, that is, including the children of your children (like node in the above example), you can use the Navigator . foreach (var node in Navigator.IterateNodes(root)) { // Something } You can even specify how to do the iteration: going first deeper into each node ( depth-first search ) or getting first every children from the current node ( breadth-first search ). If you just want to search a specific node given a full path, you want to use Navigator.SearchNode(path) . Creating the file system So you want to start using node right now, eh. Well, it will be easy. You will want to check out the static helper class: NodeFactory . Let's check some of its methods: // Manual var node1 = new Node(\"name\", new BinaryFormat(filePath)); // Factory var node2 = NodeFactory.FromFile(filePath); // Node name is the file name So, what about creating a node from a folder you would say. var emptyFolder = NodeFactory.CreateContainer(\"name\"); var folderFromDisk = NodeFactory.FromDirectory(folderPath); Yeeeah! That's the face I was looking for! You can create a virtual file that quick! Don't forget to review the overloads and the method FromMemory to create a node with data in memory. Yarhl is way more interesting now, right!? Converters: putting together all the pieces Finally! We have formats , nodes and some classes for IO operations. Now everything begin to fall into place, you'll see. Creating a tool to work with files usually require to work with different formats, right? We need to convert from .dat to .txt , from .bin into a a palette or unpacking several files from a .pak file. Well, that's easy to do. Yarhl is all about converting formats, let's see an example: public void ExportFontImage(string fontPath, string outputPath) { using (var binary = new BinaryFormat(fontPath)) { var font = (Font)ConvertFormat.With<Font2Binary>(binary); var image = (Image)ConvertFormat.With<Font2Image>(font); image.Save(outputPath); } } We start creating a new BinaryFormat from a file path. We convert the BinaryFormat (reading its Stream ) into a Font type. We convert the Font format into an Image type. We save it to a physical file in the hard-drive. \"But what's Font2Binary and Font2Image , Mister Yarhl ?\" , you would say. They are converters ! A converter is a class which implements the IConverter interface. You can check some converter examples from the tools to translate Pokémon Conquest . For instance: Font2Binary and Font2Image . Converting formats But let's come back to our example of MenuSentences from the format section. It's turn to create a converter to fill the MenuSentences class from a file. That it's to read a file with that format. public class Binary2MenuSentences : IConverter<BinaryFormat, MenuSentences> { public MenuSentences Convert(BinaryFormat source) { var menu = new MenuSentences(); var reader = new DataReader(source.Stream); menu.MagicID = reader.ReadUInt32(); ushort numSentences = reader.ReadUInt16(); menu.FileSize = reader.ReadUInt16(); for (int i = 0; i < numSentences; i++) { menu.Sentences.Add(reader.ReadString()); } return menu; } } So now we can get our menu instance with: public void ReadMenuFile(string filePath) { using (var binary = new BinaryFormat(filePath)) { var menu = (MenuSentences)ConvertFormat.With<Binary2MenuSentences>(binary); // Do something with the menu instance } } Since there is just one converter BinaryFormat -> MenuSentences we can simplify it even more: public void ReadMenuFile(string filePath) { using (var binary = new BinaryFormat(filePath)) { MenuSentences menu = ConvertFormat.To<MenuSentences>(binary); // Do something with the menu instance } } Do you want to write your new or updated menu instance? Let's write a converter to convert from MenuSentences to BinaryFormat and save in a file in disk. public class MenuSentences2Binary : IConverter<MenuSentences, BinaryFormat> { public BinaryFormat Convert(MenuSentences menu) { var binary = new BinaryFormat(); var writer = new DataWriter(binary.Stream); writer.Write(menu.MagicID); writer.Write((ushort)menu.Sentences.Count); writer.Write((ushort)0x00); // Placeholder size to override later foreach (string sentence in menu.Sentences) { writer.Write(sentence); } binary.Stream.Position = 0x06; writer.Write((ushort)binary.Stream.Length); return binary; } } And that's it! I'm pretty sure you've got enough of converters Transforming nodes Don't forget that a node can have a format. How do we convert the format from a node? We could use the approach from before, but there are two methods that will convert and update the format of the node: TransformTo and TransformWith . They will also dispose the old format so we don't need to do anything, just transform several times the format of our node until it's the one we want. var node = NodeFactory.FromFile(path); node.TransformTo<MenuSentences>; // Now node.Format is MenuSentences or from the first example: public void ExportFontImage(string fontPath, string outputPath) { using (var node = NodeFactory.FromFile(fontPath)) { node.TransformWith<Font2Binary>() .TransformWith<Font2Image>(); node.GetFormatAs<Image>().Save(outputPath); } }"
  },
  "index.html": {
    "href": "index.html",
    "title": "Yarhl: Yet Another ROM Hacking Library | SceneGate Yarhl",
    "keywords": "Yarhl: Yet Another ROM Hacking Library Yarhl is a library for ROM Hacking and fan-translation projects. It provides a virtual file system, file format and format conversion features and plugin support. It's built in C# / .NET and works in Windows, Linux and Mac OS X. <!-- prettier-ignore --> NuGet Build & Test Quality report Documentation Feel free to ask any question in the project Discussion site! . Check our on-line API overview: Yarhl in a nutshell and the complete API documentation here . Install Stable releases are available from nuget.org: Yarhl Yarhl.Media The libraries target .NET Standard 2.0. The tests (so the library) runs with the supported runtimes: .NET 5.0 .NET Core 3.1 .NET Framework 4.8 or Mono (latest on CI) Preview releases can be found in this Azure DevOps package repository . To use a preview release, create a file nuget.config in the same directory of your solution (.sln) file with the following content: <?xml version=\"1.0\" encoding=\"utf-8\"?> <configuration> <packageSources> <add key=\"SceneGate-Preview\" value=\"https://pkgs.dev.azure.com/SceneGate/SceneGate/_packaging/SceneGate-Preview/nuget/v3/index.json\" /> </packageSources> </configuration> Build The project requires to build .NET 5.0 SDK, .NET Core 3.1 runtime and .NET Framework 4.8 or latest Mono. If you open the project with VS Code and you did install the VS Code Remote Containers extension, you can have an already pre-configured development environment with Docker or Podman. To build, test and generate artifacts run: # Only required the first time dotnet tool restore # Default target is Stage-Artifacts dotnet cake To just build and test quickly, run: dotnet cake --target=BuildTest"
  },
  "README.html": {
    "href": "README.html",
    "title": "Yarhl: Yet Another ROM Hacking Library | SceneGate Yarhl",
    "keywords": "Yarhl: Yet Another ROM Hacking Library Yarhl is a library for ROM Hacking and fan-translation projects. It provides a virtual file system, file format and format conversion features and plugin support. It's built in C# / .NET and works in Windows, Linux and Mac OS X. <!-- prettier-ignore --> NuGet Build & Test Quality report Documentation Feel free to ask any question in the project Discussion site! . Check our on-line API overview: Yarhl in a nutshell and the complete API documentation here . Install Stable releases are available from nuget.org: Yarhl Yarhl.Media The libraries target .NET Standard 2.0. The tests (so the library) runs with the supported runtimes: .NET 5.0 .NET Core 3.1 .NET Framework 4.8 or Mono (latest on CI) Preview releases can be found in this Azure DevOps package repository . To use a preview release, create a file nuget.config in the same directory of your solution (.sln) file with the following content: <?xml version=\"1.0\" encoding=\"utf-8\"?> <configuration> <packageSources> <add key=\"SceneGate-Preview\" value=\"https://pkgs.dev.azure.com/SceneGate/SceneGate/_packaging/SceneGate-Preview/nuget/v3/index.json\" /> </packageSources> </configuration> Build The project requires to build .NET 5.0 SDK, .NET Core 3.1 runtime and .NET Framework 4.8 or latest Mono. If you open the project with VS Code and you did install the VS Code Remote Containers extension, you can have an already pre-configured development environment with Docker or Podman. To build, test and generate artifacts run: # Only required the first time dotnet tool restore # Default target is Stage-Artifacts dotnet cake To just build and test quickly, run: dotnet cake --target=BuildTest"
  }
}